!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("@astuanax/funml",[],n):"object"==typeof exports?exports["@astuanax/funml"]=n():t["@astuanax/funml"]=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=33)}([function(t,n,e){"use strict";function r(t){const n=t.length;return 0===n?t:e([]);function e(r){return function(){return function(r,o){const u=r.concat(o);return u.length<n?e(u):t.apply(this,u)}(r,Array.prototype.slice.call(arguments))}}}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";var r=e(0),o=e(3);n.a=Object(r.a)(function(t,n){return Object(o.a)(n)===t})},function(t,n,e){"use strict";var r=e(0),o=e(21),u=e(8),i=e(9),a=Object(r.a)(function(t,n){const e=Object(i.a)(n);let r=-1;const o=e.length,a=Object(u.a)(n);for(;++r<o;)a[e[r]]=t(n[e[r]],e[r],n);return a}),c=Object(r.a)(function(t,n){const e=Object(u.a)(n);return n.forEach((n,r,o)=>{e.set(r,t(n,r,o))}),e}),f=Object(r.a)(function(t,n){let e=-1;const r=n.length;let o="";for(;++e<r;)o+=t(n.charAt(e),e,n);return o}),s=Object(r.a)(function(t,n){let e=[];for(let r=n.next();!0!==r.done;r=n.next())e.push(t(n.value()));return e}),l=e(3),p=e(1);const d=Object(p.a)("Function");n.a=Object(r.a)(function(t,n){switch(Object(l.a)(n)){case"Function":return Object(r.a)(function(){return t.call(this,n.apply(this,arguments))});case"Object":return a(t,n);case"String":return f(t,n);case"Map":return c(t,n);case"Array":return Object(o.a)(t,n);default:return d(n[Symbol.iterator])?s(t,n):Object(o.a)(t,n)}})},function(t,n,e){"use strict";var r=e(6);n.a=Object(r.a)(function(t){return Object.prototype.toString.call(t).slice(8,-1)})},function(t,n,e){"use strict";var r=e(0),o=e(18),u=e(9),i=Object(r.a)(function(t,n,e){const r=Object(u.a)(e);let o=-1;const i=r.length;let a=Object(n);for(;++o<i;)a=t(a,e[r[o]],r[o],e);return a}),a=e(3);n.a=Object(r.a)(function(t,n,e){return{Object:i,Array:o.a}[Object(a.a)(e)](t,n,e)})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t){return!t})},function(t,n,e){"use strict";function r(t){return function(n){return 0===arguments.length?this:t(n)}}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";function r(t){return!(null==t)}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";function r(t){return new t.constructor}e.d(n,"a",function(){return r})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t){return Object.keys(Object(t))})},function(t,n,e){"use strict";var r=e(0),o=e(7),u=e(12),i=e(3),a=e(5),c=e(22),f=e(13),s=e(17),l=e(24),p=e(15),d=e(23),h=e(16),b=Object(r.a)(function(t,n){if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(Object(a.a)(j(t[e],n[e])))return!1;return!0}),O=Object(r.a)((t,n)=>{for(let e in t)if(Object(a.a)(j(t[e],n[e])))return!1;for(let e in n)if(Object(a.a)(Object(o.a)(t[e]))&&Object(o.a)(n[e]))return!1;return!0}),j=n.a=Object(r.a)(function(t,n){return!!Object(u.a)(t,n)||Object(i.a)(t)===Object(i.a)(n)&&(!Object(c.a)(Object(a.a)(Object(o.a)(t)),Object(a.a)(Object(o.a)(n)))&&(t.constructor===n.constructor&&(Object(d.a)(t)||Object(l.a)(t)||Object(p.a)(t)||Object(h.a)(t)?Object(u.a)(t.valueOf(),n.valueOf()):Object(s.a)(t)?b(t,n):!!Object(f.a)(t)&&O(t,n))))})},function(t,n,e){"use strict";var r=e(0),o=Object(r.a)(function(t,n){return Array.prototype.concat(t,n)});function u(t,n){return String(t)+String(n)}var i=e(3);n.a=Object(r.a)(function(t,n){return{String:u,Array:o}[Object(i.a)(t)](t,n)})},function(t,n,e){"use strict";var r=e(0),o=e(19);n.a=Object(r.a)(function(t,n){return 0===t&&0===n?1/t==1/n:t===n||!(!Object(o.a)(t)||!Object(o.a)(n))})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Object")},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n){return t&&n})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Number")},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Date")},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Array")},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n,e){let r=-1;const o=e.length;let u=n;for(;++r<o;)u=t(u,e[r],r,e);return u})},function(t,n,e){"use strict";e.d(n,"a",function(){return u});var r=e(15),o=e(14);function u(t){return Object(o.a)(Object(r.a)(t),isNaN(t))}},function(t,n,e){"use strict";var r=e(0),o=e(18);n.a=Object(r.a)(function(t,n){const e=n.slice(),r=e.shift();return Object(o.a)(t,r,e)})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n){let e=-1;const r=n.length,o=new Array(r);for(;++e<r;)o[e]=t(n[e],e,n);return o})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n){return t||n})},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("String")},function(t,n,e){"use strict";var r=e(1);n.a=Object(r.a)("Boolean")},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n){return n>t?n:t})},function(t,n,e){"use strict";var r=e(0);n.a=Object(r.a)(function(t,n){return n<t?n:t})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.func=n,this.dfunc=e},t.exports=n.default},function(t,n,e){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=new(((r=e(27))&&r.__esModule?r:{default:r}).default)(function(t){return 1/(1+Math.exp(-t))},function(t){return t*(1-t)});n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=i(e(30)),o=e(31),u=i(e(38));function i(t){return t&&t.__esModule?t:{default:t}}var a=(0,o.fold)(function(t,n){return t[n]=void 0===t[n]?1:t[n]+=1,t},{}),c=new r.default(function(t){var n,e=t.__value.map(function(t){return t[t.length-1]}),r=a(e),i=t.getRows(),c=(n=i,function(t){return(0,o.fold)(function(t,e){return t.push(e/n),t})([])(t)})(r);return(0,o.fold)((0,u.default)(function(t){return-t*Math.log2(t)},o.add),0,c)});n.default=c,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.func=n},t.exports=n.default},function(t,n,e){"use strict";e.r(n);var r=e(0),o=Object(r.a)(function(t,n){return+t+ +n}),u=Object(r.a)(function(t,n,e){let r=0;return t(function(t){return n(t,r++)},e)}),i=Object(r.a)(function(t,n,e){const r=Array.prototype.slice.call(e),o=n<0?r.length+n:n;return e[o]?(r[o]=t(r[o]),r):r}),a=e(2),c=Object(r.a)(function(t,n,e){return Object(a.a)(e=>n(e)?t(e):e,Array.prototype.slice.call(e))}),f=Object(r.a)(function(t,n){let e=!0;for(let r in n)if(!t(n[r])){e=!1;break}return e}),s=Object(r.a)(function(t,n){for(let e=0;e<t.length;e++)if(!t[e](n))return!1;return!0}),l=Object(r.a)(function(t){return function(){return t}}),p=e(14),d=Object(r.a)(function(t,n){let e=!1;for(let r in n)if(t(n[r])){e=!0;break}return e}),h=Object(r.a)(function(t,n){for(let e=0;e<t.length;e++)if(t[e](n))return!0;return!1}),b=e(6),O=e(1),j=e(18),y=e(21);const v=Object(O.a)("Function");var _=Object(r.a)(function(t,n){return v(t.ap)?t.ap(n):v(t)?e=>t(e)(n(e)):Object(j.a)((t,e)=>t.concat(Object(y.a)(Object(b.a)(e),n)),[],t)}),g=Object(r.a)(function(t,n){if(n.length<t)return[];const e=Array(n.length-t+1);return Object(a.a)((e,r)=>n.slice(r,r+t),e)}),m=e(11),w=Object(r.a)(function(t,n){return Object(m.a)(n,[t])}),M=Object(r.a)(function(t,n){return t.apply(t,n)}),x=Object(b.a)(function(t){return Object(r.a)(function(n,e){return t(n,e)})}),R=Object(r.a)(function(t,n){return t.bind(n)}),N=e(4),A=Object(r.a)(function(t){const n=Object(b.a)(Object(r.a)(t));return Object(r.a)(function(){return Object(N.a)(_,Object(a.a)(n,arguments[0]),Array.prototype.slice.call(arguments,1))})}),P=Object(r.a)(function(t,n){return Object(O.a)("Function")(t)?function(){return t.apply(this,arguments)&&n.apply(this,arguments)}:A(p.a)(t,n)}),C=Object(r.a)(function(t){return t.apply(t,[].slice.call(arguments,1))}),E=e(5);var S=A(E.a);function F(){let t=Array.prototype.slice.call(arguments);return function(){let n=t[t.length-1],e=[n.apply(n,arguments)],r=t.length-2;for(;r>=0;--r){const n=t[r];e=[n.apply(n,e)]}return e[0]}}function k(t){return function(n){for(var e=0;e<t.length;e++)if(t[e][0](n))return t[e][1](n)}}var T=Object(r.a)(function(t,n){return null==n||n!=n?t:n}),H=Object(r.a)(function(t,n){return new Date(t).getTime()-new Date(n).getTime()}),I=Object(r.a)(function(t,n){return+t/+n});let L=function(t){return this.__value=t,this};L.prototype.type="Right",L.prototype.isRight=function(){return!0},L.prototype.isLeft=function(){return!1},L.prototype.ap=function(t){return t.map(this.__value)},L.prototype.map=function(t){return new L(t(this.__value))},L.prototype.chain=function(t){return t(this.__value)},L.prototype.toString=function(){return"Either.Right("+this.__value+")"},L.prototype.cata=function(t,n){return n(this.__value)},L.prototype.get=function(){return this.__value},L.prototype.getOrElse=function(t){return this.__value};var D=L;let q=function(t){return this.__value=t,this};q.prototype.type="Left",q.prototype.isLeft=function(){return!0},q.prototype.isRight=function(){return!1},q.prototype.ap=function(t){return this},q.prototype.map=function(t){return this},q.prototype.chain=function(t){return this},q.prototype.toString=function(){return"Either.Left("+this.__value+")"},q.prototype.cata=function(t,n){return t(this.__value)},q.prototype.get=function(){throw new TypeError("Can't extract the value of a Left(a).")},q.prototype.getOrElse=function(t){return t};var z=q;let J=function(t){return this.Right(t)};J.of=function(t){return t instanceof J?t:this instanceof J?this.Right(t):new J(t)},J.prototype.type="Either",J.prototype.isLeft=!1,J.prototype.isRight=!1,J.prototype.Left=function(t){return new z(t)},J.Left=function(t){return new z(t)},J.prototype.Right=function(t){return new D(t)},J.Right=function(t){return new D(t)};var U=J,B=e(8),W=e(10),V=e(7),G=l(!1),K=Object(r.a)(function(t,n){var e=[];for(let r=0;r<n.length;r++)t(n[r])&&e.push(n[r]);return e}),Q=e(9),X=Object(r.a)(function(t,n){let e={};const r=Object(Q.a)(n);for(let o=0;o<r.length;o++)t(n[r[o]])&&(e[r[o]]=n[r[o]]);return e}),Y=Object(r.a)(function(t,n){let e=new Map,r=n.entries(),o=r.next();for(;!o.done;){const n=o.value[0],u=o.value[1];t(n,u)&&e.set(n,u),o=r.next()}return e}),Z=e(3),$=Object(r.a)(function(t,n){switch(Object(Z.a)(n)){case"Object":return X(t,n);case"Map":return Y(t,n);default:return K(t,n)}}),tt=Object(r.a)(function(t,n){let e=0;const r=n.length;for(;e<r;){if(t(n[e]))return e;e+=1}return-1}),nt=Object(b.a)(function(t){return t&&t.length?t[0]:void 0});const et=Object(O.a)("Function");var rt=Object(r.a)(function(t,n){return et(n)?function(e){return t(n(e))(e)}:et(n.flatMap)?n.flatMap(t):Object(N.a)((n,e)=>Object(m.a)(n,t(e)),Object(B.a)(n),n)});function ot(t){let n=1===(e=arguments).length?[e[0]]:Array.apply(null,e);var e;return n.shift(),t.replace(/{(\d+)}/g,(t,e)=>Object(E.a)(Object(O.a)("Undefined",n[e]))?n[e]:t)}var ut=Object(r.a)(function(t,n){return Object.prototype.hasOwnProperty.call(n,t)}),it=Object(r.a)(function(t,n){return t in n}),at=e(12);function ct(t){return t}var ft=e(17),st=e(24),lt=e(16);function pt(t){return Object(V.a)(t)&&Object(W.a)(t,Object(B.a)(t))}var dt=t=>H(new Date)(t)<0,ht=Object(O.a)("Map"),bt=e(19),Ot=Object(O.a)("null"),jt=e(15),yt=e(13),vt=Object(O.a)("Set"),_t=e(23),gt=Object(O.a)("undefined");function mt(t){return Object(lt.a)(t)&&isFinite(t.valueOf())}let wt=function(t){return this.__value=t,this};wt.prototype.isJust=function(){return!0},wt.prototype.isNothing=function(){return!1};var Mt=wt,xt=Object(r.a)(function(t){return t.keys()}),Rt=Object(r.a)(function(t){switch(Object(Z.a)(t)){case"Map":return xt(t);default:return Object(Q.a)(t)}}),Nt=Object(r.a)(function(t){const n=[];for(const e in t)n.push(e);return n}),At=Object(b.a)(function(t){return t&&t.length?t[t.length-1]:void 0}),Pt=e(25);let Ct=function(){};Ct.prototype.isJust=function(){return!1},Ct.prototype.isNothing=function(){return!0};var Et=Ct;let St=function(t){this.__value=t};St.of=function(t){return t instanceof St?t:this instanceof St?(this.__value=t,this):new St(t)},St.prototype.type="Maybe",St.prototype.getOrElse=function(t){return this.isNothing()?t:this.__value},St.prototype.map=function(t){return this.isNothing()?St.of(null):St.of(t(this.__value))},St.prototype.flatMap=function(t){return this.map(t)},St.prototype.ap=function(t){return St.of(t).map(this.__value)},St.prototype.isNothing=function(){return null==this.__value},St.prototype.isJust=function(){return!this.isNothing()},St.prototype.Nothing=function(){return new Et},St.prototype.Just=function(){return new Mt(this._value)};var Ft=St,kt=Object(r.a)(function(t,n){return Array.from(new Set(t.concat(n)))});const Tt=Object(r.a)((t,n)=>{let e=Object.assign({},t);if(Object(at.a)(t,n))return Object.assign({},t);for(let r in n){if(!Object.prototype.hasOwnProperty.call(n,r))continue;const o=n[r],u=t[r];Object(yt.a)(o)&&Object(yt.a)(u)?e[r]=Tt(o,u):Object(ft.a)(u)?e[r]=kt(u,o):e[r]=o}return e});var Ht=Tt,It=e(26),Lt=Object(r.a)(function(t,n){return+t*+n}),Dt=Object(r.a)((t,n)=>{let e={};return Object.keys(t).filter(t=>-1===n.indexOf(t)).forEach(n=>{e[n]=t[n]}),e}),qt=e(22),zt=Object(r.a)(function(t,n){let e,r=n,o=0;for(;o<t.length;){if(null==r)return;e=t[o],r=Number.isInteger(e)&&e<0?r[r.length+e]:r[e],o+=1}return r}),Jt=Object(r.a)(function(t,n){const e={};let r=0;for(;r<t.length;)t[r]in n&&(e[t[r]]=n[t[r]]),r+=1;return e}),Ut=Object(r.a)(function(t,n){return n[t]}),Bt=e(20),Wt=Object(r.a)(function(t,n){return Array.prototype.slice.call(n,0).sort(t)}),Vt=Object(r.a)(function(t){return Object(N.a)(o,0,t)}),Gt=l(!0),Kt=t=>t/864e5,Qt=t=>t/36e5,Xt=t=>t/6e4,Yt=t=>t/1e3;function Zt(t){return!1!==t&&Object(V.a)(t)}var $t=Object(b.a)(function(t){const n=Object(Q.a)(t),e=n.length,r=[];let o=0;for(;o<e;)r[o]=t[n[o]],o+=1;return r}),tn=Object(r.a)(function(t,n,e){const r=[],o=Math.min(n.length,e.length);let u=0;for(u=0;u<o;u++)r.push(t(n[u],e[u]));return r}),nn=Object(r.a)(function(t,n){return tn(function(t,n){return[t,n]},t,n)}),en=Object(r.a)(function(t,n){for(var e=0,r=Math.min(t.length,n.length),o={};e<r;)o[t[e]]=n[e],e+=1;return o});e.d(n,"add",function(){return o}),e.d(n,"addIndex",function(){return u}),e.d(n,"adjust",function(){return i}),e.d(n,"adjustWith",function(){return c}),e.d(n,"all",function(){return f}),e.d(n,"allPass",function(){return s}),e.d(n,"always",function(){return l}),e.d(n,"and",function(){return p.a}),e.d(n,"any",function(){return d}),e.d(n,"anyPass",function(){return h}),e.d(n,"ap",function(){return _}),e.d(n,"aperture",function(){return g}),e.d(n,"append",function(){return w}),e.d(n,"apply",function(){return M}),e.d(n,"binary",function(){return x}),e.d(n,"bind",function(){return R}),e.d(n,"both",function(){return P}),e.d(n,"call",function(){return C}),e.d(n,"complement",function(){return S}),e.d(n,"compose",function(){return F}),e.d(n,"concat",function(){return m.a}),e.d(n,"cond",function(){return k}),e.d(n,"curry",function(){return r.a}),e.d(n,"defaultTo",function(){return T}),e.d(n,"diffDate",function(){return H}),e.d(n,"divide",function(){return I}),e.d(n,"Either",function(){return U}),e.d(n,"Left",function(){return z}),e.d(n,"Right",function(){return D}),e.d(n,"empty",function(){return B.a}),e.d(n,"equals",function(){return W.a}),e.d(n,"exists",function(){return V.a}),e.d(n,"F",function(){return G}),e.d(n,"filter",function(){return $}),e.d(n,"findIndex",function(){return tt}),e.d(n,"first",function(){return nt}),e.d(n,"flatMap",function(){return rt}),e.d(n,"fold",function(){return N.a}),e.d(n,"formatString",function(){return ot}),e.d(n,"has",function(){return ut}),e.d(n,"hasIn",function(){return it}),e.d(n,"identical",function(){return at.a}),e.d(n,"identity",function(){return ct}),e.d(n,"is",function(){return O.a}),e.d(n,"isArray",function(){return ft.a}),e.d(n,"isBoolean",function(){return st.a}),e.d(n,"isDate",function(){return lt.a}),e.d(n,"isEmpty",function(){return pt}),e.d(n,"isFutureDate",function(){return dt}),e.d(n,"isMap",function(){return ht}),e.d(n,"isNan",function(){return bt.a}),e.d(n,"isNull",function(){return Ot}),e.d(n,"isNumber",function(){return jt.a}),e.d(n,"isObject",function(){return yt.a}),e.d(n,"isSet",function(){return vt}),e.d(n,"isString",function(){return _t.a}),e.d(n,"isUndefined",function(){return gt}),e.d(n,"isValidDate",function(){return mt}),e.d(n,"Just",function(){return Mt}),e.d(n,"keys",function(){return Rt}),e.d(n,"keysIn",function(){return Nt}),e.d(n,"last",function(){return At}),e.d(n,"lift",function(){return A}),e.d(n,"map",function(){return a.a}),e.d(n,"max",function(){return Pt.a}),e.d(n,"Maybe",function(){return Ft}),e.d(n,"merge",function(){return Ht}),e.d(n,"min",function(){return It.a}),e.d(n,"multiply",function(){return Lt}),e.d(n,"not",function(){return E.a}),e.d(n,"Nothing",function(){return Et}),e.d(n,"omit",function(){return Dt}),e.d(n,"or",function(){return qt.a}),e.d(n,"path",function(){return zt}),e.d(n,"pick",function(){return Jt}),e.d(n,"prop",function(){return Ut}),e.d(n,"reduce",function(){return Bt.a}),e.d(n,"sort",function(){return Wt}),e.d(n,"sum",function(){return Vt}),e.d(n,"T",function(){return Gt}),e.d(n,"toDay",function(){return Kt}),e.d(n,"toHour",function(){return Qt}),e.d(n,"toMinutes",function(){return Xt}),e.d(n,"toSeconds",function(){return Yt}),e.d(n,"truthy",function(){return Zt}),e.d(n,"type",function(){return Z.a}),e.d(n,"union",function(){return kt}),e.d(n,"values",function(){return $t}),e.d(n,"zip",function(){return nn}),e.d(n,"zipObj",function(){return en}),e.d(n,"zipWith",function(){return tn})},function(t,n,e){"use strict";e.r(n);var r=e(0),o=e(2),u=e(4),i=e(25),a=e(26),c=e(20),f=e(10),s=e(5),l=e(11),p=Object(r.a)(function(t,n,e){return Object(l.a)(n,t.__value[e])}),d=Object(r.a)(t=>[]);var h=Object(r.a)((t,n,e)=>Object(o.a)((r,o)=>Object(u.a)((e,r,u)=>e+=function(t,n=4){return Number(Number.parseFloat(t).toPrecision(n))}(r*n.__value[u][o],t),0)(e))(n.__value[0])),b=(t,n)=>Object(o.a)((t,e)=>1*(n===e))(t),O=Object(r.a)((t,n)=>Object(o.a)((e,r)=>(t[r]||[]).concat(n[r]))(n)),j=(t,n)=>Array.apply(null,Array(t)).map(t=>Array.apply(null,Array(n)));let y=function(t){this.__value=t};y.of=function(t){return t instanceof y?t:this instanceof y?(this.__value=t,this):new y(t)},y.prototype.type="Matrix",y.prototype.precision=4,y.prototype.setPrecision=function(t){this.precision=t},y.prototype.isSymmetric=function(){const t=this.__value,n=y.transpose(this).__value;return Object(f.a)(t,n)},y.prototype.isSquare=function(){return Object(f.a)(this.getCols(),this.getRows())},y.prototype.isOrthogonal=function(){const t=this.dot(this.transpose()),n=this.identity();return Object(f.a)(t,n)},y.prototype.getCols=function(){return this.__value[0].length},y.prototype.equals=function(t){return Object(f.a)(this.__value,t.__value||t)},y.prototype.getRows=function(){return this.__value.length},y.prototype.getShape=function(){return[this.getRows(),this.getCols()]},y.prototype.map=function(t){return y.of(Object(o.a)(t)(this.__value))},y.map=Object(r.a)(function(t,n){return y.of(n).map(t)}),y.prototype.fold=function(t){return y.of(Object(u.a)(t,[])(this.__value))},y.fold=Object(r.a)(function(t,n){return y.of(n).fold(t)}),y.prototype.ap=function(t){return y.of(t).map(this.__value)},y.ap=Object(r.a)(function(t,n){return y.of(t).ap(n)}),y.prototype.concat=function(t,n=p){return y.of(this).map(n(t))},y.concat=Object(r.a)(function(t,n,e=p){return y.of(t).map(e(n))}),y.prototype.empty=function(){return y.of(this).map(d)},y.empty=Object(r.a)(function(t=0,n=0){const e=j(t,n);return y.of(e).map(d)}),y.prototype.identity=function(){return y.of(b).ap(this)},y.identity=Object(r.a)(function(t,n){const e=j(t,n);return y.of(b).ap(e)}),y.prototype.combine=function(t){return y.of(this).concat(y.of(t),p)},y.combine=Object(r.a)(function(t,n){return y.of(t).concat(y.of(n),p)}),y.prototype.dot=function(t){return y.of(this).concat(y.of(t),h(this.precision))},y.dot=Object(r.a)(function(t,n){return y.of(t).dot(y.of(n))}),y.prototype.fill=function(t){return y.of(this).map(Object(o.a)(n=>t(n)))},y.prototype.zeros=function(){return y.of(this).fill(t=>0)},y.zeros=function(t,n){const e=j(t,n);return y.of(e).fill(t=>0)},y.prototype.ones=function(){return y.of(this).fill(t=>1)},y.ones=function(t,n){const e=j(t,n);return y.of(e).fill(t=>1)},y.prototype.random=function(t=(t=>2*Math.random()-1)){return y.of(this).fill(t)},y.random=function(t=(t=>2*Math.random()-1),n,e){const r=j(n,e);return y.of(r).fill(t)},y.prototype.toArray=function(){return this.__value.map(t=>t.map(t=>t))},y.prototype.clone=function(){const t=y.fromArray(this.__value);return t.setPrecision(this.precision),t},y.fromArray=function(t){return y.of(Object(o.a)(t=>Object(o.a)(t=>t)(t))(t))},y.prototype.transpose=function(){return y.of(Object(u.a)(O,[],this.__value))},y.transpose=function(t){return y.of(t).transpose()},y.prototype.add=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map((n,e)=>Object(o.a)((n,r)=>n+t.__value[e][r])(n))}return this.map(Object(o.a)(n=>n+t))},y.prototype.subtract=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map((n,e)=>Object(o.a)((n,r)=>n-t.__value[e][r])(n))}return this.map(Object(o.a)(n=>n-t))},y.prototype.multiply=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map((n,e)=>Object(o.a)((n,r)=>n*t.__value[e][r])(n))}return this.map(Object(o.a)(n=>n*t))},y.prototype.additiveinverse=function(){return y.of(this).multiply(-1)},y.prototype.hadamard=function(t){return y.of(this).multiply(t)},y.prototype.lu=function(){const t=this.getRows(),n=this.clone(),e=this.zeros(),r=this.zeros();for(let o=0;o<t;++o){if(Math.abs(n.__value[o][o])<1e-6)throw Error("Cannot proceed without a row exchange");e.__value[o][o]=1;for(let r=o+1;r<t;++r){e.__value[r][o]=n.__value[r][o]/n.__value[o][o];for(let u=o+1;u<t;++u)n.__value[r][u]=n.__value[r][u]-e.__value[r][o]*n.__value[o][u]}for(let e=o;e<t;++e)r.__value[o][e]=n.__value[o][e]}return[e,r]},y.prototype.rref=function(){let t=0;const n=this.clone();for(let e=0;e<this.getRows();++e){if(this.getCols()<=t)return n;let r=e;for(;0===n.__value[r][t];)if(++r,this.getRows()===r&&(r=e,++t,this.getCols()===t))return n;let o=n.__value[r];n.__value[r]=n.__value[e],n.__value[e]=o;let u=n.__value[e][t];for(let t=0;t<this.getCols();++t)n.__value[e][t]/=u;for(let r=0;r<this.getRows();++r)if(r!==e){u=n.__value[r][t];for(let t=0;t<this.getCols();++t)n.__value[r][t]-=u*n.__value[e][t]}t++}return n},y.prototype.solve=function(t){const n=this.lu(),e=n[0],r=n[1];return function(t,n,e,r){return function(t,n,e,r){const o=[];for(let r=t-1;r>-1;--r){let u=0;for(let e=r+1;e<t;++e)u+=n.__value[r][e]*o[e];o[r]=(e[r]-u)/n.__value[r][r]}return o}(t,e,function(t,n,e){let r=0;const o=[];for(let u=0;u<t;++u){for(let t=0;t<u;++t)r+=n.__value[u][t]*o[t];o[u]=e[u]-r,r=0}return o}(t,n,r))}(this.getRows(),e,r,t)},y.prototype.inverse=function(){const t=this.clone(),n=t.identity(),e=t.concat(n).rref().__value.reduce((t,n,e)=>{const r=n.length/2;return t.push(n.slice(r,n.length)),t},[]);return y.of(e)},y.prototype.rank=function(){const t=this.rref();let n=0;for(let e=0;e<t.getCols();++e)n+=t.__value[e][e];return n},y.prototype.dimension=function(){return this.rank()},y.prototype.diag=function(){return Object(u.a)((t,n,e)=>t.concat(n[e]))([])(this.__value)},y.diag=function(t){return y.of(t).diag()},y.prototype.diagproduct=function(){return Object(u.a)((t,n,e)=>t*=n[e])(1)(this.__value)},y.diagproduct=function(t){return y.of(t).diagproduct()},y.prototype.sum=function(){return Object(u.a)((t,n)=>t+=Object(u.a)((t,n)=>t+n)(0)(n))(0)(this.__value)},y.sum=function(t){return y.of(t).sum()},y.prototype.kronecker=function(t){const n=this.getRows(),e=this.getCols(),r=t.getRows(),o=t.getCols(),u=this.__value,i=t.__value,a=j(n*r,e*o);for(let t=0;t<n;t++)for(let n=0;n<e;n++)for(let e=0;e<r;e++)for(let c=0;c<o;c++)a[r*t+e][o*n+c]=u[t][n]*i[e][c];return y.of(a)},y.kronecker=function(t,n){return y.of(t).kronecker(n)},y.prototype.determinant=function(){if(this.isSquare()){if(2===this.getCols()){const t=this.__value[0][0],n=this.__value[0][1],e=this.__value[1][0];return t*this.__value[1][1]-n*e}const t=this.lu();return Number(t[0].diagproduct())*Number(t[1].diagproduct())}throw Error("The Matrix needs to be a square Matrix to calculate the determinant")},y.determinant=function(t){return y.of(t).determinant()},y.prototype.max=function(){return Object(c.a)(i.a,[].concat.apply([],this.__value))},y.prototype.min=function(){return Object(c.a)(a.a,[].concat.apply([],this.__value))},y.prototype.divide=function(t){if(t instanceof y){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot create division");if(Object(s.a)(t.isSquare()))throw new Error("Matrix is not square, cannot create inverse");const n=t.inverse();return this.dot(n)}return this.multiply(1/t)};n.default=y},function(t,n,e){t.exports=e(34)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"Perceptron",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(n,"NeuralNetwork",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"ActivationFunction",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(n,"sigmoid",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"tanh",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(n,"entropy",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(n,"DecisionTree",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(n,"Impurity",{enumerable:!0,get:function(){return s.default}});var r=l(e(35)),o=l(e(36)),u=l(e(27)),i=l(e(28)),a=l(e(37)),c=l(e(29)),f=l(e(39)),s=l(e(30));function l(t){return t&&t.__esModule?t:{default:t}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=function(t){this.weights=t||[]};r.of=function(t){return t instanceof r?t:this instanceof r?(this.weights=t,this):new r(t)},r.prototype.type="Perceptron",r.prototype.predict=function(t){var n=this,e=this.weights[0];return t.forEach(function(t,r){e+=n.weights[r+1]*t}),e>=0?1:0},r.prototype.train=function(t,n,e){var r=this;this.weights=Array.apply(null,Array(t[0].length)).map(function(t){return 0});for(var o=0;o<e;o++)t.forEach(function(t,e){var o=t.slice(-1)[0],u=t.slice(0,-1),i=o-r.predict(u);u.forEach(function(t,e){r.weights[e+1]+=n*i*t})})};var o=r;n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=u(e(32)),o=u(e(28));function u(t){return t&&t.__esModule?t:{default:t}}var i=function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,e=new Array(n),o=0;o<n;o++)e[o]=arguments[o];this.inputNodes=e[0],this.hiddenNodes=e[1],this.outputNodes=e[2];var u=function(t){return 2*Math.random()-1};this.weightsIh=r.default.random(u,this.hiddenNodes,this.inputNodes),this.weightsHo=r.default.random(u,this.outputNodes,this.hiddenNodes),this.biasH=r.default.random(u,this.hiddenNodes,1),this.biasO=r.default.random(u,this.outputNodes,1),this.setActivationFunction(),this.setLearningRate(),this.type="NeuralNetwork"};i.prototype.setActivationFunction=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.default;this.activationFunction=t},i.prototype.setLearningRate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.1;this.learningRate=t},i.prototype.predict=function(t){var n=this,e=r.default.fromArray(t),o=r.default.dot(this.weightsIh,e);o=(o=r.default.of(o).add(this.biasH)).map(function(t){return t.map(n.activationFunction.func)});var u=r.default.dot(this.weightsHo,o);return(u=(u=r.default.of(u).add(this.biasO)).map(function(t){return t.map(n.activationFunction.func)})).toArray()},i.prototype.train=function(t,n){var e=this,o=r.default.fromArray(t),u=r.default.dot(this.weightsIh,o);u=(u=r.default.of(u).add(this.biasH)).map(function(t){return t.map(e.activationFunction.func)});var i=r.default.dot(this.weightsHo,u);i=(i=r.default.of(i).add(this.biasO)).map(function(t){return t.map(e.activationFunction.func)});var a=r.default.fromArray(n),c=r.default.of(a).subtract(i),f=i.map(function(t){return t.map(e.activationFunction.dfunc)});f=(f=f.multiply(c)).multiply(this.learningRate);var s=r.default.transpose(u),l=r.default.dot(f,s);this.weightsHo=r.default.of(this.weightsHo).add(l),this.biasO=r.default.of(this.biasO).add(f);var p=r.default.transpose(this.weightsHo),d=r.default.dot(p,c),h=r.default.of(u).map(function(t){return t.map(e.activationFunction.dfunc)}).multiply(d).multiply(this.learningRate),b=r.default.transpose(o),O=r.default.dot(h,b);this.weightsIh=r.default.of(this.weightsIh).add(O),this.biasH=r.default.of(this.biasH).add(h)};var a=i;n.default=a,t.exports=n.default},function(t,n,e){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=new(((r=e(27))&&r.__esModule?r:{default:r}).default)(function(t){return Math.tanh(t)},function(t){return 1-t*t});n.default=o,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=(0,e(31).curry)(function(t,n){return function(e,r){return n(e,t(r))}});n.default=r,t.exports=n.default},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=u(e(32)),o=u(e(29));function u(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}var a=function t(n,e,r,o,u){i(this,t),this.col=n||-1,this.value=null,this.left=r,this.right=o,this.results=u||[]},c=function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.default;i(this,t),this.data=r.default.of(n),this.evalFunction=e};n.default=c,c.prototype.getColumn=function(t){return this.data.map(function(n){return n[t]})},c.prototype.split=function(t,n,e){var r;return r=isNaN(n)||isNaN(e)?function(t){return t[n]===e}:function(t){return t[n]>=e},[t.fold(function(t,n){if(r(n))return t.push(n),t}),t.fold(function(t,n){if(!r(n))return t.push(n),t})]},c.prototype.train=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.data;if(0===this.data.getRows())return new a;for(var e=this.evalFunction.func(n),r=0,o=[],u=[],i=this.data.getCols()-1,c=function(n){var i=t.getColumn(n).toArray();console.table(i),i.forEach(function(a,c,f){var s=t.split(n,a),l=s[0].getRows()/t.data.getRows(),p=e-l*t.evalFunction(s[0])-(1-l)*t.evalFunction(s[0]);p>r&&s.length>0&&s.length>0&&(r=p,o=[n,i[c]],u=s)})},f=0;f<i;++f)c(f);if(r>0){var s=this.train(u[0]),l=this.train(u[1]);return new a([],o[0],o[1],s,l)}return new a(this.classes())},c.prototype.predict=function(){},t.exports=n.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,