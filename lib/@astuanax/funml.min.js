!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funml",[],e):"object"==typeof exports?exports["@astuanax/funml"]=e():t["@astuanax/funml"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.func=e,this.dfunc=n},t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=new(((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return 1/(1+Math.exp(-t))},function(t){return t*(1-t)});e.default=o,t.exports=e.default},function(t,e,n){t.exports=n(3)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Perceptron",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"NeuralNetwork",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"ActivationFunction",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"sigmoid",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"tanh",{enumerable:!0,get:function(){return a.default}});var r=s(n(4)),o=s(n(5)),i=s(n(0)),u=s(n(1)),a=s(n(6));function s(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=function(t){this.weights=t||[]};r.of=function(t){return t instanceof r?t:this instanceof r?(this.weights=t,this):new r(t)},r.prototype.type="Perceptron",r.prototype.predict=function(t){var e=this,n=this.weights[0];return t.forEach(function(t,r){n+=e.weights[r+1]*t}),n>=0?1:0},r.prototype.train=function(t,e,n){var r=this;this.weights=Array.apply(null,Array(t[0].length)).map(function(t){return 0});for(var o=0;o<n;o++)t.forEach(function(t,n){var o=t.slice(-1)[0],i=t.slice(0,-1),u=o-r.predict(i);i.forEach(function(t,n){r.weights[n+1]+=e*u*t})})};var o=r;e.default=o,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(n(7)),o=i(n(1));function i(t){return t&&t.__esModule?t:{default:t}}var u=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];this.inputNodes=n[0],this.hiddenNodes=n[1],this.outputNodes=n[2];var i=function(t){return 2*Math.random()-1};this.weightsIh=r.default.random(i,this.hiddenNodes,this.inputNodes),this.weightsHo=r.default.random(i,this.outputNodes,this.hiddenNodes),this.biasH=r.default.random(i,this.hiddenNodes,1),this.biasO=r.default.random(i,this.outputNodes,1),this.setActivationFunction(),this.setLearningRate(),this.type="NeuralNetwork"};u.prototype.setActivationFunction=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.default;this.activationFunction=t},u.prototype.setLearningRate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.1;this.learningRate=t},u.prototype.predict=function(t){var e=this,n=r.default.fromArray(t),o=r.default.dot(this.weightsIh,n);o=(o=r.default.of(o).add(this.biasH)).map(function(t){return t.map(e.activationFunction.func)});var i=r.default.dot(this.weightsHo,o);return(i=(i=r.default.of(i).add(this.biasO)).map(function(t){return t.map(e.activationFunction.func)})).toArray()},u.prototype.train=function(t,e){var n=this,o=r.default.fromArray(t),i=r.default.dot(this.weightsIh,o);i=(i=r.default.of(i).add(this.biasH)).map(function(t){return t.map(n.activationFunction.func)});var u=r.default.dot(this.weightsHo,i);u=(u=r.default.of(u).add(this.biasO)).map(function(t){return t.map(n.activationFunction.func)});var a=r.default.fromArray(e),s=r.default.of(a).subtract(u),f=u.map(function(t){return t.map(n.activationFunction.dfunc)});f=(f=f.multiply(s)).multiply(this.learningRate);var c=r.default.transpose(i),l=r.default.dot(f,c);this.weightsHo=r.default.of(this.weightsHo).add(l),this.biasO=r.default.of(this.biasO).add(f);var p=r.default.transpose(this.weightsHo),h=r.default.dot(p,s),d=r.default.of(i).map(function(t){return t.map(n.activationFunction.dfunc)}).multiply(h).multiply(this.learningRate),_=r.default.transpose(o),v=r.default.dot(d,_);this.weightsIh=r.default.of(this.weightsIh).add(v),this.biasH=r.default.of(this.biasH).add(d)};var a=u;e.default=a,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=new(((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return Math.tanh(t)},function(t){return 1-t*t});e.default=o,t.exports=e.default},function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,o){const i=r.concat(o);return i.length<e?n(i):t.apply(this,i)}(r,Array.prototype.slice.call(arguments))}}}n.r(e);var o=r(function(t,e){let n=-1;const r=e.length,o=new Array(r);for(;++n<r;)o[n]=t(e[n],n,e);return o});function i(t){return new t.constructor}var u=r(function(t){return Object.keys(Object(t))}),a=r(function(t,e){const n=u(e);let r=-1;const o=n.length,a=i(e);for(;++r<o;)a[n[r]]=t(e[n[r]],n[r],e);return a}),s=r(function(t,e){const n=i(e);return e.forEach((e,r,o)=>{n.set(r,t(e,r,o))}),n}),f=r(function(t,e){let n=-1;const r=e.length;let o="";for(;++n<r;)o+=t(e.charAt(n),n,e);return o}),c=r(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n});var l,p=(l=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:l(t)}),h=r(function(t,e){return p(e)===t});const d=h("Function");var _=r(function(t,e){switch(p(e)){case"Function":return r(function(){return t.call(this,e.apply(this,arguments))});case"Object":return a(t,e);case"String":return f(t,e);case"Map":return s(t,e);case"Array":return o(t,e);default:return d(e[Symbol.iterator])?c(t,e):o(t,e)}}),v=r(function(t,e,n){let r=-1;const o=n.length;let i=e;for(;++r<o;)i=t(i,n[r],r,n);return i}),y=r(function(t,e,n){const r=u(n);let o=-1;const i=r.length;let a=Object(e);for(;++o<i;)a=t(a,n[r[o]],r[o],n);return a}),g=r(function(t,e,n){return{Object:y,Array:v}[p(n)](t,e,n)}),m=r(function(t,e){return e>t?e:t}),w=r(function(t,e){return e<t?e:t}),b=r(function(t,e){const n=e.slice(),r=n.shift();return v(t,r,n)});function O(t){return!(null==t)}var M=h("Number"),j=r(function(t,e){return t&&e});function x(t){return j(M(t),isNaN(t))}var A=r(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!x(t)||!x(e))}),R=r(function(t){return!t}),C=r(function(t,e){return t||e}),P=h("Object"),N=h("Array"),S=h("Boolean"),E=h("String"),F=h("Date"),k=r(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(R(q(t[n],e[n])))return!1;return!0}),H=r((t,e)=>{for(let n in t)if(R(q(t[n],e[n])))return!1;for(let n in e)if(R(O(t[n]))&&O(e[n]))return!1;return!0}),q=r(function(t,e){return!!A(t,e)||p(t)===p(e)&&(!C(R(O(t)),R(O(e)))&&(t.constructor===e.constructor&&(E(t)||S(t)||M(t)||F(t)?A(t.valueOf(),e.valueOf()):N(t)?k(t,e):!!P(t)&&H(t,e))))}),I=r(function(t,e){return Array.prototype.concat(t,e)});function T(t,e){return String(t)+String(e)}var z=r(function(t,e){return{String:T,Array:I}[p(t)](t,e)}),L=r(function(t,e,n){return z(e,t.__value[n])}),B=r(t=>[]);var D=r((t,e,n)=>_((r,o)=>g((n,r,i)=>n+=function(t,e=4){return Number(Number.parseFloat(t).toPrecision(e))}(r*e.__value[i][o],t),0)(n))(e.__value[0])),U=(t,e)=>_((t,n)=>1*(e===n))(t),G=r((t,e)=>_((n,r)=>(t[r]||[]).concat(e[r]))(e)),J=(t,e)=>Array.apply(null,Array(t)).map(t=>Array.apply(null,Array(e)));let K=function(t){this.__value=t};K.of=function(t){return t instanceof K?t:this instanceof K?(this.__value=t,this):new K(t)},K.prototype.type="Matrix",K.prototype.precision=4,K.prototype.setPrecision=function(t){this.precision=t},K.prototype.isSymmetric=function(){const t=this.__value,e=K.transpose(this).__value;return q(t,e)},K.prototype.isSquare=function(){return q(this.getCols(),this.getRows())},K.prototype.isOrthogonal=function(){const t=this.dot(this.transpose()),e=this.identity();return q(t,e)},K.prototype.getCols=function(){return this.__value[0].length},K.prototype.equals=function(t){return q(this.__value,t.__value||t)},K.prototype.getRows=function(){return this.__value.length},K.prototype.getShape=function(){return[this.getRows(),this.getCols()]},K.prototype.map=function(t){return K.of(_(t)(this.__value))},K.map=r(function(t,e){return K.of(e).map(t)}),K.prototype.fold=function(t){return K.of(g(t,[])(this.__value))},K.fold=r(function(t,e){return K.of(e).fold(t)}),K.prototype.ap=function(t){return K.of(t).map(this.__value)},K.ap=r(function(t,e){return K.of(t).ap(e)}),K.prototype.concat=function(t,e=L){return K.of(this).map(e(t))},K.concat=r(function(t,e,n=L){return K.of(t).map(n(e))}),K.prototype.empty=function(){return K.of(this).map(B)},K.empty=r(function(t=0,e=0){const n=J(t,e);return K.of(n).map(B)}),K.prototype.identity=function(){return K.of(U).ap(this)},K.identity=r(function(t,e){const n=J(t,e);return K.of(U).ap(n)}),K.prototype.combine=function(t){return K.of(this).concat(K.of(t),L)},K.combine=r(function(t,e){return K.of(t).concat(K.of(e),L)}),K.prototype.dot=function(t){return K.of(this).concat(K.of(t),D(this.precision))},K.dot=r(function(t,e){return K.of(t).dot(K.of(e))}),K.prototype.fill=function(t){return K.of(this).map(_(e=>t(e)))},K.prototype.zeros=function(){return K.of(this).fill(t=>0)},K.zeros=function(t,e){const n=J(t,e);return K.of(n).fill(t=>0)},K.prototype.ones=function(){return K.of(this).fill(t=>1)},K.ones=function(t,e){const n=J(t,e);return K.of(n).fill(t=>1)},K.prototype.random=function(t=(t=>2*Math.random()-1)){return K.of(this).fill(t)},K.random=function(t=(t=>2*Math.random()-1),e,n){const r=J(e,n);return K.of(r).fill(t)},K.prototype.toArray=function(){return this.__value.map(t=>t.map(t=>t))},K.prototype.clone=function(){const t=K.fromArray(this.__value);return t.setPrecision(this.precision),t},K.fromArray=function(t){return K.of(_(t=>_(t=>t)(t))(t))},K.prototype.transpose=function(){return K.of(g(G,[],this.__value))},K.transpose=function(t){return K.of(t).transpose()},K.prototype.add=function(t){if(t instanceof K){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map((e,n)=>_((e,r)=>e+t.__value[n][r])(e))}return this.map(_(e=>e+t))},K.prototype.subtract=function(t){if(t instanceof K){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map((e,n)=>_((e,r)=>e-t.__value[n][r])(e))}return this.map(_(e=>e-t))},K.prototype.multiply=function(t){if(t instanceof K){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map((e,n)=>_((e,r)=>e*t.__value[n][r])(e))}return this.map(_(e=>e*t))},K.prototype.additiveinverse=function(){return K.of(this).multiply(-1)},K.prototype.hadamard=function(t){return K.of(this).multiply(t)},K.prototype.lu=function(){const t=this.getRows(),e=this.clone(),n=this.zeros(),r=this.zeros();for(let o=0;o<t;++o){if(Math.abs(e.__value[o][o])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[o][o]=1;for(let r=o+1;r<t;++r){n.__value[r][o]=e.__value[r][o]/e.__value[o][o];for(let i=o+1;i<t;++i)e.__value[r][i]=e.__value[r][i]-n.__value[r][o]*e.__value[o][i]}for(let n=o;n<t;++n)r.__value[o][n]=e.__value[o][n]}return[n,r]},K.prototype.rref=function(){let t=0;const e=this.clone();for(let n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;let r=n;for(;0===e.__value[r][t];)if(++r,this.getRows()===r&&(r=n,++t,this.getCols()===t))return e;let o=e.__value[r];e.__value[r]=e.__value[n],e.__value[n]=o;let i=e.__value[n][t];for(let t=0;t<this.getCols();++t)e.__value[n][t]/=i;for(let r=0;r<this.getRows();++r)if(r!==n){i=e.__value[r][t];for(let t=0;t<this.getCols();++t)e.__value[r][t]-=i*e.__value[n][t]}t++}return e},K.prototype.solve=function(t){const e=this.lu(),n=e[0],r=e[1];return function(t,e,n,r){return function(t,e,n,r){const o=[];for(let r=t-1;r>-1;--r){let i=0;for(let n=r+1;n<t;++n)i+=e.__value[r][n]*o[n];o[r]=(n[r]-i)/e.__value[r][r]}return o}(t,n,function(t,e,n){let r=0;const o=[];for(let i=0;i<t;++i){for(let t=0;t<i;++t)r+=e.__value[i][t]*o[t];o[i]=n[i]-r,r=0}return o}(t,e,r))}(this.getRows(),n,r,t)},K.prototype.inverse=function(){const t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce((t,e,n)=>{const r=e.length/2;return t.push(e.slice(r,e.length)),t},[]);return K.of(n)},K.prototype.rank=function(){const t=this.rref();let e=0;for(let n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},K.prototype.dimension=function(){return this.rank()},K.prototype.diag=function(){return g((t,e,n)=>t.concat(e[n]))([])(this.__value)},K.diag=function(t){return K.of(t).diag()},K.prototype.diagproduct=function(){return g((t,e,n)=>t*=e[n])(1)(this.__value)},K.diagproduct=function(t){return K.of(t).diagproduct()},K.prototype.sum=function(){return g((t,e)=>t+=g((t,e)=>t+e)(0)(e))(0)(this.__value)},K.sum=function(t){return K.of(t).sum()},K.prototype.kronecker=function(t){const e=this.getRows(),n=this.getCols(),r=t.getRows(),o=t.getCols(),i=this.__value,u=t.__value,a=J(e*r,n*o);for(let t=0;t<e;t++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let s=0;s<o;s++)a[r*t+n][o*e+s]=i[t][e]*u[n][s];return K.of(a)},K.kronecker=function(t,e){return K.of(t).kronecker(e)},K.prototype.determinant=function(){if(this.isSquare()){if(2===this.getCols()){const t=this.__value[0][0],e=this.__value[0][1],n=this.__value[1][0];return t*this.__value[1][1]-e*n}const t=this.lu();return Number(t[0].diagproduct())*Number(t[1].diagproduct())}throw Error("The Matrix needs to be a square Matrix to calculate the determinant")},K.determinant=function(t){return K.of(t).determinant()},K.prototype.max=function(){return b(m,[].concat.apply([],this.__value))},K.prototype.min=function(){return b(w,[].concat.apply([],this.__value))},K.prototype.divide=function(t){if(t instanceof K){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot create division");if(R(t.isSquare()))throw new Error("Matrix is not square, cannot create inverse");const e=t.inverse();return this.dot(e)}return this.multiply(1/t)};e.default=K}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,