!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funml",[],e):"object"==typeof exports?exports["@astuanax/funml"]=e():t["@astuanax/funml"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.func=e,this.dfunc=n},t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=new(((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return 1/(1+Math.exp(-t))},function(t){return t*(1-t)});e.default=o,t.exports=e.default},function(t,e,n){t.exports=n(3)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Perceptron",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"NeuralNetwork",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"ActivationFunction",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"sigmoid",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"tanh",{enumerable:!0,get:function(){return a.default}});var r=f(n(4)),o=f(n(5)),i=f(n(0)),u=f(n(1)),a=f(n(6));function f(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=function(t){this.weights=t||[]};r.of=function(t){return t instanceof r?t:this instanceof r?(this.weights=t,this):new r(t)},r.prototype.type="Perceptron",r.prototype.predict=function(t){var e=this,n=this.weights[0];return t.forEach(function(t,r){n+=e.weights[r+1]*t}),n>=0?1:0},r.prototype.train=function(t,e,n){var r=this;this.weights=Array.apply(null,Array(t[0].length)).map(function(t){return 0});for(var o=0;o<n;o++)t.forEach(function(t,n){var o=t.slice(-1)[0],i=t.slice(0,-1),u=o-r.predict(i);i.forEach(function(t,n){r.weights[n+1]+=e*u*t})})};var o=r;e.default=o,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(n(7)),o=i(n(1));function i(t){return t&&t.__esModule?t:{default:t}}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];this.input_nodes=n[0],this.hidden_nodes=n[1],this.output_nodes=n[2],this.weights_ih=new r.default(this.hidden_nodes,this.input_nodes),this.weights_ho=new r.default(this.output_nodes,this.hidden_nodes),this.weights_ih.randomize(),this.weights_ho.randomize(),this.bias_h=new r.default(this.hidden_nodes,1),this.bias_o=new r.default(this.output_nodes,1),this.bias_h.randomize(),this.bias_o.randomize(),this.setActivationFunction(),this.setLearningRate()}var e,n,i;return e=t,(n=[{key:"setActivationFunction",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.default;this.activation_function=t}},{key:"setLearningRate",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.1;this.learning_rate=t}},{key:"predict",value:function(t){var e=r.default.fromArray(t),n=r.default.dot(this.weights_ih,e);n.add(this.bias_h),n.map(this.activation_function.func);var o=r.default.dot(this.weights_ho,n);return o.add(this.bias_o),o.map(this.activation_function.func),o.toArray()}},{key:"train",value:function(t,e){var n=r.default.fromArray(t),o=r.default.dot(this.weights_ih,n);o.add(this.bias_h),o.map(this.activation_function.func);var i=r.default.dot(this.weights_ho,o);i.add(this.bias_o),i.map(this.activation_function.func);var u=r.default.fromArray(e),a=r.default.subtract(u,i),f=r.default.map(i,this.activation_function.dfunc);f.multiply(a),f.multiply(this.learning_rate);var s=r.default.transpose(o),c=r.default.dot(f,s);this.weights_ho.add(c),this.bias_o.add(f);var l=r.default.transpose(this.weights_ho),p=r.default.dot(l,a),h=r.default.map(o,this.activation_function.dfunc);h.multiply(p),h.multiply(this.learning_rate);var d=r.default.transpose(n),_=r.default.dot(h,d);this.weights_ih.add(_),this.bias_h.add(h)}}])&&u(e.prototype,n),i&&u(e,i),t}();e.default=a,t.exports=e.default},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=new(((r=n(0))&&r.__esModule?r:{default:r}).default)(function(t){return Math.tanh(t)},function(t){return 1-t*t});e.default=o,t.exports=e.default},function(t,e,n){"use strict";function r(t){const e=t.length;return 0===e?t:n([]);function n(r){return function(){return function(r,o){const i=r.concat(o);return i.length<e?n(i):t.apply(this,i)}(r,Array.prototype.slice.call(arguments))}}}n.r(e);var o=r(function(t,e){let n=-1;const r=e.length,o=new Array(r);for(;++n<r;)o[n]=t(e[n],n,e);return o});function i(t){return new t.constructor}var u=r(function(t){return Object.keys(Object(t))}),a=r(function(t,e){const n=u(e);let r=-1;const o=n.length,a=i(e);for(;++r<o;)a[n[r]]=t(e[n[r]],n[r],e);return a}),f=r(function(t,e){const n=i(e);return e.forEach((e,r,o)=>{n.set(r,t(e,r,o))}),n}),s=r(function(t,e){let n=-1;const r=e.length;let o="";for(;++n<r;)o+=t(e.charAt(n),n,e);return o}),c=r(function(t,e){let n=[];for(let r=e.next();!0!==r.done;r=e.next())n.push(t(e.value()));return n});var l,p=(l=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:l(t)}),h=r(function(t,e){return p(e)===t});const d=h("Function");var _=r(function(t,e){switch(p(e)){case"Function":return r(function(){return t.call(this,e.apply(this,arguments))});case"Object":return a(t,e);case"String":return s(t,e);case"Map":return f(t,e);case"Array":return o(t,e);default:return d(e[Symbol.iterator])?c(t,e):o(t,e)}}),v=r(function(t,e,n){let r=-1;const o=n.length;let i=e;for(;++r<o;)i=t(i,n[r],r,n);return i}),y=r(function(t,e,n){const r=u(n);let o=-1;const i=r.length;let a=Object(e);for(;++o<i;)a=t(a,n[r[o]],r[o],n);return a}),g=r(function(t,e,n){return{Object:y,Array:v}[p(n)](t,e,n)});function m(t){return!(null==t)}var b=h("Number"),w=r(function(t,e){return t&&e});function j(t){return w(b(t),isNaN(t))}var O=r(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!j(t)||!j(e))}),A=r(function(t){return!t}),M=r(function(t,e){return t||e}),x=h("Object"),P=h("Array"),C=h("Boolean"),R=h("String"),k=h("Date"),S=r(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(A(z(t[n],e[n])))return!1;return!0}),E=r((t,e)=>{for(let n in t)if(A(z(t[n],e[n])))return!1;for(let n in e)if(A(m(t[n]))&&m(e[n]))return!1;return!0}),z=r(function(t,e){return!!O(t,e)||p(t)===p(e)&&(!M(A(m(t)),A(m(e)))&&(t.constructor===e.constructor&&(R(t)||C(t)||b(t)||k(t)?O(t.valueOf(),e.valueOf()):P(t)?S(t,e):!!x(t)&&E(t,e))))}),N=r(function(t,e){return Array.prototype.concat(t,e)});function F(t,e){return String(t)+String(e)}var T=r(function(t,e){return{String:F,Array:N}[p(t)](t,e)}),q=r(function(t,e,n){return T(e,t.__value[n])}),L=r(t=>[]);var B=r((t,e,n)=>_((r,o)=>g((n,r,i)=>n+=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)}(r*e.__value[i][o],t),0)(n))(e.__value[0])),D=(t,e)=>_((t,n)=>1*(e===n))(t),U=r((t,e)=>_((n,r)=>(t[r]||[]).concat(e[r]))(e)),G=(t,e)=>Array.apply(null,Array(t)).map(t=>Array.apply(null,Array(e)));let H=function(t){this.__value=t};H.of=function(t){return t instanceof H?t:this instanceof H?(this.__value=t,this):new H(t)},H.prototype.type="Matrix",H.prototype.precision=4,H.prototype.setPrecision=function(t){this.precision=t},H.prototype.isSymmetric=function(){const t=this.__value,e=H.transpose(this).__value;return z(t,e)},H.prototype.isSquare=function(){return z(this.getCols(),this.getRows())},H.prototype.isOrthogonal=function(){const t=this.dot(this.transpose()),e=this.identity();return z(t,e)},H.prototype.getCols=function(){return this.__value[0].length},H.prototype.equals=function(t){return z(this.__value,t.__value||t)},H.prototype.getRows=function(){return this.__value.length},H.prototype.getShape=function(){return[this.getRows(),this.getCols()]},H.prototype.map=function(t){return H.of(_(t)(this.__value))},H.map=r(function(t,e){return H.of(e).map(t)}),H.prototype.fold=function(t){return H.of(g(t,[])(this.__value))},H.fold=r(function(t,e){return H.of(e).fold(t)}),H.prototype.ap=function(t){return H.of(t).map(this.__value)},H.ap=r(function(t,e){return H.of(t).ap(e)}),H.prototype.concat=function(t,e=q){return H.of(this).map(e(t))},H.concat=r(function(t,e,n=q){return H.of(t).map(n(e))}),H.prototype.empty=function(){return H.of(this).map(L)},H.empty=r(function(t=0,e=0){const n=G(t,e);return H.of(n).map(L)}),H.prototype.identity=function(){return H.of(D).ap(this)},H.identity=function(t,e){const n=G(t,e);return H.of(D).ap(n)},H.prototype.combine=function(t){return H.of(this).concat(H.of(t),q)},H.combine=function(t,e){return H.of(t).concat(H.of(e),q)},H.prototype.dot=function(t){return H.of(this).concat(H.of(t),B(this.precision))},H.dot=function(t,e){return H.of(t).dot(H.of(e))},H.prototype.fill=function(t){return H.of(this).map(_(e=>t(e)))},H.prototype.zeros=function(){return H.of(this).fill(t=>0)},H.zeros=function(t,e){const n=G(t,e);return H.of(n).fill(t=>0)},H.prototype.ones=function(){return H.of(this).fill(t=>1)},H.ones=function(t,e){const n=G(t,e);return H.of(n).fill(t=>1)},H.prototype.random=function(t=(t=>2*Math.random()-1)){return H.of(this).fill(t)},H.random=function(t=(t=>2*Math.random()-1),e,n){const r=G(e,n);return H.of(r).fill(t)},H.prototype.toArray=function(){return this.__value.map(t=>t.map(t=>t))},H.prototype.clone=function(){return H.fromArray(this.__value)},H.fromArray=function(t){return H.of(_(t=>_(t=>t)(t))(t))},H.prototype.transpose=function(){return H.of(g(U,[],this.__value))},H.transpose=function(t){return H.of(t).transpose()},H.prototype.add=function(t){if(t instanceof H){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map((e,n)=>_((e,r)=>e+t.__value[n][r])(e))}return this.map(_(e=>e+t))},H.prototype.subtract=function(t){if(t instanceof H){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map((e,n)=>_((e,r)=>e-t.__value[n][r])(e))}return this.map(_(e=>e-t))},H.prototype.multiply=function(t){if(t instanceof H){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map((e,n)=>_((e,r)=>e*t.__value[n][r])(e))}return this.map(_(e=>e*t))},H.prototype.additiveinverse=function(){return H.of(this).multiply(-1)},H.prototype.hadamard=function(t){return H.of(this).multiply(t)},H.prototype.lu=function(){const t=this.getRows(),e=this.clone(),n=this.zeros(),r=this.zeros();for(let o=0;o<t;++o){if(Math.abs(e.__value[o][o])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[o][o]=1;for(let r=o+1;r<t;++r){n.__value[r][o]=e.__value[r][o]/e.__value[o][o];for(let i=o+1;i<t;++i)e.__value[r][i]=e.__value[r][i]-n.__value[r][o]*e.__value[o][i]}for(let n=o;n<t;++n)r.__value[o][n]=e.__value[o][n]}return[n,r]},H.prototype.rref=function(){let t=0;const e=this.clone();for(let n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;let r=n;for(;0===e.__value[r][t];)if(++r,this.getRows()===r&&(r=n,++t,this.getCols()===t))return e;let o=e.__value[r];e.__value[r]=e.__value[n],e.__value[n]=o;let i=e.__value[n][t];for(let t=0;t<this.getCols();++t)e.__value[n][t]/=i;for(let r=0;r<this.getRows();++r)if(r!==n){i=e.__value[r][t];for(let t=0;t<this.getCols();++t)e.__value[r][t]-=i*e.__value[n][t]}t++}return e},H.prototype.solve=function(t){const e=this.clone().lu(),n=e[0],r=e[1],o=this.getRows();let i=0;const u=[],a=[];for(let e=0;e<o;++e){for(let t=0;t<e;++t)i+=n.__value[e][t]*u[t];u[e]=t[e]-i,i=0}for(let t=o-1;t>-1;--t){let e=0;for(let n=t+1;n<o;++n)e+=r.__value[t][n]*a[n];a[t]=(u[t]-e)/r.__value[t][t]}return a},H.prototype.inverse=function(){const t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce((t,e,n)=>{const r=e.length/2;return t.push(e.slice(r,e.length)),t},[]);return H.of(n)},H.prototype.rank=function(){const t=this.rref();let e=0;for(let n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},H.prototype.dimension=function(){return this.rank()},H.prototype.diag=function(){return g((t,e,n)=>t.concat(e[n]))([])(this.__value)},H.diag=function(t){return H.of(t).diag()},H.prototype.diagproduct=function(){return g((t,e,n)=>t*=e[n])(1)(this.__value)},H.diagproduct=function(t){return H.of(t).diagproduct()},H.prototype.sum=function(){return g((t,e)=>t+=g((t,e)=>t+e)(0)(e))(0)(this.__value)},H.sum=function(t){return H.of(t).sum()},H.prototype.kronecker=function(t){const e=this.getRows(),n=this.getCols(),r=t.getRows(),o=t.getCols(),i=this.__value,u=t.__value,a=G(e*r,n*o);for(let t=0;t<e;t++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let f=0;f<o;f++)a[r*t+n][o*e+f]=i[t][e]*u[n][f];return H.of(a)},H.kronecker=function(t,e){return H.of(t).kronecker(e)};e.default=H}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,