!function(A,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("@astuanax/funmatrix"),require("fun.js")):"function"==typeof define&&define.amd?define("@astuanax/funml",["@astuanax/funmatrix","fun.js"],n):"object"==typeof exports?exports["@astuanax/funml"]=n(require("@astuanax/funmatrix"),require("fun.js")):A["@astuanax/funml"]=n(A["@astuanax/funmatrix"],A["fun.js"])}("undefined"!=typeof self?self:this,function(A,n){return function(A){var n={};function e(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return A[t].call(l.exports,l,l.exports,e),l.l=!0,l.exports}return e.m=A,e.c=n,e.d=function(A,n,t){e.o(A,n)||Object.defineProperty(A,n,{enumerable:!0,get:t})},e.r=function(A){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},e.t=function(A,n){if(1&n&&(A=e(A)),8&n)return A;if(4&n&&"object"==typeof A&&A&&A.__esModule)return A;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:A}),2&n&&"string"!=typeof A)for(var l in A)e.d(t,l,function(n){return A[n]}.bind(null,l));return t},e.n=function(A){var n=A&&A.__esModule?function(){return A.default}:function(){return A};return e.d(n,"a",n),n},e.o=function(A,n){return Object.prototype.hasOwnProperty.call(A,n)},e.p="",e(e.s=2)}([function(n,e){n.exports=A},function(A,e){A.exports=n},function(A,n,e){A.exports=e(3)},function(A,n,e){"use strict";e.r(n);var t,l,i,o,c,u,a=(t="/Volumes/BigOne/github/funml/src/Perceptron.js",l="d0c34d37814448cc885edd5812645c66c8e3c494",i=new(0,function(){}.constructor)("return this")(),c={path:"/Volumes/BigOne/github/funml/src/Perceptron.js",statementMap:{0:{start:{line:10,column:17},end:{line:12,column:1}},1:{start:{line:11,column:2},end:{line:11,column:31}},2:{start:{line:28,column:0},end:{line:37,column:2}},3:{start:{line:29,column:2},end:{line:29,column:44}},4:{start:{line:29,column:33},end:{line:29,column:44}},5:{start:{line:31,column:2},end:{line:34,column:3}},6:{start:{line:32,column:4},end:{line:32,column:23}},7:{start:{line:33,column:4},end:{line:33,column:16}},8:{start:{line:36,column:2},end:{line:36,column:29}},9:{start:{line:44,column:0},end:{line:44,column:41}},10:{start:{line:58,column:0},end:{line:66,column:2}},11:{start:{line:59,column:14},end:{line:59,column:18}},12:{start:{line:61,column:19},end:{line:61,column:34}},13:{start:{line:62,column:2},end:{line:64,column:5}},14:{start:{line:63,column:4},end:{line:63,column:43}},15:{start:{line:65,column:2},end:{line:65,column:33}},16:{start:{line:83,column:0},end:{line:103,column:2}},17:{start:{line:84,column:15},end:{line:84,column:19}},18:{start:{line:86,column:2},end:{line:88,column:5}},19:{start:{line:87,column:4},end:{line:87,column:13}},20:{start:{line:90,column:2},end:{line:102,column:3}},21:{start:{line:91,column:4},end:{line:101,column:7}},22:{start:{line:92,column:21},end:{line:92,column:35}},23:{start:{line:93,column:16},end:{line:93,column:30}},24:{start:{line:95,column:23},end:{line:95,column:42}},25:{start:{line:97,column:18},end:{line:97,column:39}},26:{start:{line:98,column:6},end:{line:100,column:9}},27:{start:{line:99,column:8},end:{line:99,column:51}}},fnMap:{0:{name:"Perceptron",decl:{start:{line:10,column:26},end:{line:10,column:36}},loc:{start:{line:10,column:46},end:{line:12,column:1}},line:10},1:{name:"(anonymous_1)",decl:{start:{line:28,column:16},end:{line:28,column:17}},loc:{start:{line:28,column:31},end:{line:37,column:1}},line:28},2:{name:"(anonymous_2)",decl:{start:{line:58,column:31},end:{line:58,column:32}},loc:{start:{line:58,column:46},end:{line:66,column:1}},line:58},3:{name:"(anonymous_3)",decl:{start:{line:62,column:14},end:{line:62,column:15}},loc:{start:{line:62,column:30},end:{line:64,column:3}},line:62},4:{name:"(anonymous_4)",decl:{start:{line:83,column:29},end:{line:83,column:30}},loc:{start:{line:83,column:61},end:{line:103,column:1}},line:83},5:{name:"(anonymous_5)",decl:{start:{line:86,column:63},end:{line:86,column:64}},loc:{start:{line:86,column:76},end:{line:88,column:3}},line:86},6:{name:"(anonymous_6)",decl:{start:{line:91,column:18},end:{line:91,column:19}},loc:{start:{line:91,column:36},end:{line:101,column:5}},line:91},7:{name:"(anonymous_7)",decl:{start:{line:98,column:18},end:{line:98,column:19}},loc:{start:{line:98,column:34},end:{line:100,column:7}},line:98}},branchMap:{0:{loc:{start:{line:11,column:17},end:{line:11,column:30}},type:"binary-expr",locations:[{start:{line:11,column:17},end:{line:11,column:24}},{start:{line:11,column:28},end:{line:11,column:30}}],line:11},1:{loc:{start:{line:29,column:2},end:{line:29,column:44}},type:"if",locations:[{start:{line:29,column:2},end:{line:29,column:44}},{start:{line:29,column:2},end:{line:29,column:44}}],line:29},2:{loc:{start:{line:31,column:2},end:{line:34,column:3}},type:"if",locations:[{start:{line:31,column:2},end:{line:34,column:3}},{start:{line:31,column:2},end:{line:34,column:3}}],line:31},3:{loc:{start:{line:65,column:9},end:{line:65,column:32}},type:"cond-expr",locations:[{start:{line:65,column:27},end:{line:65,column:28}},{start:{line:65,column:31},end:{line:65,column:32}}],line:65}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/Perceptron.js"],names:["Perceptron","weights","of","val","prototype","type","predict","row","activation","forEach","x","i","train","lRate","nEpoch","Array","apply","length","map","idx","expected","slice","prediction","error","y","j"],mappings:"AAAA;;;;;;;;;AASA,IAAIA,UAAU,GAAG,SAAbA,UAAa,CAAUC,OAAV,EAAmB;AAClC,OAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD,CAFD;AAIA;;;;;;;;;;;;;;;AAaAD,UAAU,CAACE,EAAX,GAAgB,UAAUC,GAAV,EAAe;AAC7B,MAAIA,GAAG,YAAYH,UAAnB,EAA+B,OAAOG,GAAP;;AAC/B,MAAI,gBAAgBH,UAApB,EAAgC;AAC9B,SAAKC,OAAL,GAAeE,GAAf;AACA,WAAO,IAAP;AACD;;AACD,SAAO,IAAIH,UAAJ,CAAeG,GAAf,CAAP;AACD,CAPD;AASA;;;;;;AAIAH,UAAU,CAACI,SAAX,CAAqBC,IAArB,GAA4B,YAA5B;AAEA;;;;;;;;;;;;;AAYAL,UAAU,CAACI,SAAX,CAAqBE,OAArB,GAA+B,UAAUC,GAAV,EAAe;AAAA;;AAC5C,MAAIC,UAAU,GAAG,KAAKP,OAAL,CAAa,CAAb,CAAjB;AACAM,EAAAA,GAAG,CAACE,OAAJ,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpBH,IAAAA,UAAU,IAAI,KAAI,CAACP,OAAL,CAAaU,CAAC,GAAG,CAAjB,IAAsBD,CAApC;AACD,GAFD;AAGA,SAAOF,UAAU,IAAI,CAAd,GAAkB,CAAlB,GAAsB,CAA7B;AACD,CAND;AAQA;;;;;;;;;;;;;;;;AAcAR,UAAU,CAACI,SAAX,CAAqBQ,KAArB,GAA6B,UAAUA,KAAV,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAAA;;AAC3D,OAAKb,OAAL,GAAec,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACH,KAAK,CAAC,CAAD,CAAL,CAASK,MAAV,CAAvB,EAA0CC,GAA1C,CAA8C,UAAAR,CAAC;AAAA,WAAI,CAAJ;AAAA,GAA/C,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,MAApB,EAA4BH,CAAC,EAA7B,EAAiC;AAC/BC,IAAAA,KAAK,CAACH,OAAN,CAAc,UAACC,CAAD,EAAIS,GAAJ,EAAY;AACxB,UAAMC,QAAQ,GAAGV,CAAC,CAACW,KAAF,CAAQ,CAAC,CAAT,EAAY,CAAZ,CAAjB;AACA,UAAMd,GAAG,GAAGG,CAAC,CAACW,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAZ;;AACA,UAAMC,UAAU,GAAG,MAAI,CAAChB,OAAL,CAAaC,GAAb,CAAnB;;AACA,UAAMgB,KAAK,GAAGH,QAAQ,GAAGE,UAAzB;AACAf,MAAAA,GAAG,CAACE,OAAJ,CAAY,UAACe,CAAD,EAAIC,CAAJ,EAAU;AACpB,QAAA,MAAI,CAACxB,OAAL,CAAawB,CAAC,GAAG,CAAjB,KAAuBZ,KAAK,GAAGU,KAAR,GAAgBC,CAAvC;AACD,OAFD;AAGD,KARD;AASD;AACF,CAbD;;AAeA,eAAexB,UAAf",sourcesContent:["/**\n * @class Perceptron\n * @classdesc Perceptron to train and predict\n * @see of\n * @example\n *\n * const m =  Perceptron.of([0.2365698, 0.4567897, 0.95989898, -0.457878787])\n *\n */\nlet Perceptron = function (weights) {\n  this.weights = weights || []\n}\n\n/**\n * @memberOf Perceptron\n * @static\n * @function Perceptron.of\n * @desc Creates a Perceptron object\n * @param weights {array} Weights for predicting\n * @returns {Perceptron}\n * @example\n *\n * const weights = [0.123456, 0.458789, 0.9987454]\n * const m =  Perceptron.of(weights)\n *\n */\nPerceptron.of = function (val) {\n  if (val instanceof Perceptron) return val\n  if (this instanceof Perceptron) {\n    this.weights = val\n    return this\n  }\n  return new Perceptron(val)\n}\n\n/**\n * @memberOf Perceptron\n * @type {string}\n */\nPerceptron.prototype.type = 'Perceptron'\n\n/**\n * @memberOf Perceptron\n * @function Perceptron#predict\n * @param row {Array} Array of values to predict\n * @returns {Boolean}\n * @example\n *\n * const m =  Perceptron.of()\n * const train  = [...] // dataset: [[0,1,2], [1,2,3]]\n * m.train(train, 0.1, 10000)\n * m.predict([1,2,1]) // returns 1 or 0\n */\nPerceptron.prototype.predict = function (row) {\n  var activation = this.weights[0]\n  row.forEach((x, i) => {\n    activation += this.weights[i + 1] * x\n  })\n  return activation >= 0 ? 1 : 0\n}\n\n/**\n * @memberOf Perceptron\n * @function Perceptron#train\n * @param train {Array} Dataset to train the preceptron\n * @param lRate {Number} Set the learning rate of the perceptron\n * @param nEpoch {Number} Set the number of iterations to train the perceptron\n * @example\n *\n * const m =  Perceptron.of()\n * const train  = [...] // dataset: [[0,1,2], [1,2,3]]\n * m.train(train, 0.1, 10000)\n * m.weights = [0.213131, -0.45464, 0.789797]\n *\n */\nPerceptron.prototype.train = function (train, lRate, nEpoch) {\n  this.weights = Array.apply(null, Array(train[0].length)).map(x => 0)\n  for (let i = 0; i < nEpoch; i++) {\n    train.forEach((x, idx) => {\n      const expected = x.slice(-1)[0]\n      const row = x.slice(0, -1)\n      const prediction = this.predict(row)\n      const error = expected - prediction\n      row.forEach((y, j) => {\n        this.weights[j + 1] += lRate * error * y\n      })\n    })\n  }\n}\n\nexport default Perceptron\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(u=i[o="__coverage__"]||(i[o]={}))[t]&&u[t].hash===l?u[t]:(c.hash=l,u[t]=c));a.s[0]++;var r=function(A){a.f[0]++,a.s[1]++,this.weights=(a.b[0][0]++,A||(a.b[0][1]++,[]))};a.s[2]++,r.of=function(A){return a.f[1]++,a.s[3]++,A instanceof r?(a.b[1][0]++,a.s[4]++,A):(a.b[1][1]++,a.s[5]++,this instanceof r?(a.b[2][0]++,a.s[6]++,this.weights=A,a.s[7]++,this):(a.b[2][1]++,a.s[8]++,new r(A)))},a.s[9]++,r.prototype.type="Perceptron",a.s[10]++,r.prototype.predict=function(A){a.f[2]++;var n=(a.s[11]++,this),e=(a.s[12]++,this.weights[0]);return a.s[13]++,A.forEach(function(A,t){a.f[3]++,a.s[14]++,e+=n.weights[t+1]*A}),a.s[15]++,e>=0?(a.b[3][0]++,1):(a.b[3][1]++,0)},a.s[16]++,r.prototype.train=function(A,n,e){a.f[4]++;var t=(a.s[17]++,this);a.s[18]++,this.weights=Array.apply(null,Array(A[0].length)).map(function(A){return a.f[5]++,a.s[19]++,0}),a.s[20]++;for(var l=0;l<e;l++)a.s[21]++,A.forEach(function(A,e){a.f[6]++;var l=(a.s[22]++,A.slice(-1)[0]),i=(a.s[23]++,A.slice(0,-1)),o=(a.s[24]++,t.predict(i)),c=(a.s[25]++,l-o);a.s[26]++,i.forEach(function(A,e){a.f[7]++,a.s[27]++,t.weights[e+1]+=n*c*A})})};var s=r,m=e(0),C=e.n(m),d=function(){var A="/Volumes/BigOne/github/funml/src/ActivationFunction.js",n="ddbc0ffc9ada184cbaa1a439bf720238b516a2dc",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/ActivationFunction.js",statementMap:{0:{start:{line:1,column:50},end:{line:1,column:151}},1:{start:{line:1,column:92},end:{line:1,column:149}},2:{start:{line:8,column:25},end:{line:13,column:1}},3:{start:{line:9,column:2},end:{line:9,column:44}},4:{start:{line:11,column:2},end:{line:11,column:19}},5:{start:{line:12,column:2},end:{line:12,column:21}}},fnMap:{0:{name:"_classCallCheck",decl:{start:{line:1,column:9},end:{line:1,column:24}},loc:{start:{line:1,column:48},end:{line:1,column:153}},line:1},1:{name:"ActivationFunction",decl:{start:{line:8,column:34},end:{line:8,column:52}},loc:{start:{line:8,column:66},end:{line:13,column:1}},line:8}},branchMap:{0:{loc:{start:{line:1,column:50},end:{line:1,column:151}},type:"if",locations:[{start:{line:1,column:50},end:{line:1,column:151}},{start:{line:1,column:50},end:{line:1,column:151}}],line:1}},s:{0:0,1:0,2:0,3:0,4:0,5:0},f:{0:0,1:0},b:{0:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/ActivationFunction.js"],names:["ActivationFunction","func","dfunc"],mappings:";;AAAA;;;;;IAKqBA,kB,GACnB,4BAAaC,IAAb,EAAmBC,KAAnB,EAA0B;AAAA;;AACxB,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACD,C;;SAJkBF,kB",sourcesContent:["/**\n * @class ActivationFunction\n * @param func\n * @param dfunc\n */\nexport default class ActivationFunction {\n  constructor (func, dfunc) {\n    this.func = func\n    this.dfunc = dfunc\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}();d.s[2]++;var p=function A(n,e){d.f[1]++,d.s[3]++,function(A,n){if(d.f[0]++,d.s[0]++,!(A instanceof n))throw d.b[0][0]++,d.s[1]++,new TypeError("Cannot call a class as a function");d.b[0][1]++}(this,A),d.s[4]++,this.func=n,d.s[5]++,this.dfunc=e},f=function(){var A="/Volumes/BigOne/github/funml/src/util/sigmoid.js",n="136b472592660c42f0fbdf4723b0f47e0b39f53a",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/util/sigmoid.js",statementMap:{0:{start:{line:7,column:14},end:{line:11,column:2}},1:{start:{line:8,column:2},end:{line:8,column:32}},2:{start:{line:10,column:2},end:{line:10,column:21}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:7,column:37},end:{line:7,column:38}},loc:{start:{line:7,column:50},end:{line:9,column:1}},line:7},1:{name:"(anonymous_1)",decl:{start:{line:9,column:3},end:{line:9,column:4}},loc:{start:{line:9,column:16},end:{line:11,column:1}},line:9}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/util/sigmoid.js"],names:["ActivationFunction","sigmoid","x","Math","exp","y"],mappings:"AAAA,OAAOA,kBAAP,MAA+B,uBAA/B;AAEA;;;;;AAIA,IAAMC,OAAO,GAAG,IAAID,kBAAJ,CACd,UAAAE,CAAC;AAAA,SAAI,KAAK,IAAIC,IAAI,CAACC,GAAL,CAAS,CAACF,CAAV,CAAT,CAAJ;AAAA,CADa,EAEd,UAAAG,CAAC;AAAA,SAAIA,CAAC,IAAI,IAAIA,CAAR,CAAL;AAAA,CAFa,CAAhB;AAIA,eAAeJ,OAAf",sourcesContent:["import ActivationFunction from '../ActivationFunction'\n\n/**\n * @function sigmoid\n * @type {ActivationFunction}\n */\nconst sigmoid = new ActivationFunction(\n  x => 1 / (1 + Math.exp(-x)),\n  y => y * (1 - y)\n)\nexport default sigmoid\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}(),B=(f.s[0]++,new p(function(A){return f.f[0]++,f.s[1]++,1/(1+Math.exp(-A))},function(A){return f.f[1]++,f.s[2]++,A*(1-A)})),h=function(){var A="/Volumes/BigOne/github/funml/src/NeuralNetwork.js",n="ca3549a02612973b7802d2e4dff1f4ac56423c88",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/NeuralNetwork.js",statementMap:{0:{start:{line:1,column:50},end:{line:1,column:151}},1:{start:{line:1,column:92},end:{line:1,column:149}},2:{start:{line:12,column:20},end:{line:34,column:1}},3:{start:{line:13,column:2},end:{line:13,column:39}},4:{start:{line:15,column:2},end:{line:17,column:3}},5:{start:{line:16,column:4},end:{line:16,column:35}},6:{start:{line:19,column:2},end:{line:19,column:30}},7:{start:{line:20,column:2},end:{line:20,column:31}},8:{start:{line:21,column:2},end:{line:21,column:31}},9:{start:{line:23,column:10},end:{line:25,column:3}},10:{start:{line:24,column:4},end:{line:24,column:33}},11:{start:{line:27,column:2},end:{line:27,column:71}},12:{start:{line:28,column:2},end:{line:28,column:72}},13:{start:{line:29,column:2},end:{line:29,column:53}},14:{start:{line:30,column:2},end:{line:30,column:53}},15:{start:{line:31,column:2},end:{line:31,column:31}},16:{start:{line:32,column:2},end:{line:32,column:25}},17:{start:{line:33,column:2},end:{line:33,column:30}},18:{start:{line:42,column:0},end:{line:45,column:2}},19:{start:{line:43,column:13},end:{line:43,column:88}},20:{start:{line:44,column:2},end:{line:44,column:33}},21:{start:{line:53,column:0},end:{line:56,column:2}},22:{start:{line:54,column:21},end:{line:54,column:92}},23:{start:{line:55,column:2},end:{line:55,column:35}},24:{start:{line:65,column:0},end:{line:84,column:2}},25:{start:{line:66,column:14},end:{line:66,column:18}},26:{start:{line:69,column:15},end:{line:69,column:43}},27:{start:{line:70,column:15},end:{line:70,column:49}},28:{start:{line:71,column:2},end:{line:71,column:45}},29:{start:{line:73,column:2},end:{line:75,column:5}},30:{start:{line:74,column:4},end:{line:74,column:50}},31:{start:{line:77,column:15},end:{line:77,column:49}},32:{start:{line:78,column:2},end:{line:78,column:45}},33:{start:{line:79,column:2},end:{line:81,column:5}},34:{start:{line:80,column:4},end:{line:80,column:50}},35:{start:{line:83,column:2},end:{line:83,column:26}},36:{start:{line:93,column:0},end:{line:142,column:2}},37:{start:{line:94,column:15},end:{line:94,column:19}},38:{start:{line:97,column:15},end:{line:97,column:43}},39:{start:{line:98,column:15},end:{line:98,column:49}},40:{start:{line:99,column:2},end:{line:99,column:45}},41:{start:{line:101,column:2},end:{line:103,column:5}},42:{start:{line:102,column:4},end:{line:102,column:51}},43:{start:{line:105,column:16},end:{line:105,column:50}},44:{start:{line:106,column:2},end:{line:106,column:47}},45:{start:{line:107,column:2},end:{line:109,column:5}},46:{start:{line:108,column:4},end:{line:108,column:51}},47:{start:{line:111,column:16},end:{line:111,column:45}},48:{start:{line:114,column:21},end:{line:114,column:57}},49:{start:{line:117,column:18},end:{line:119,column:4}},50:{start:{line:118,column:4},end:{line:118,column:52}},51:{start:{line:120,column:2},end:{line:120,column:47}},52:{start:{line:121,column:2},end:{line:121,column:52}},53:{start:{line:123,column:16},end:{line:123,column:40}},54:{start:{line:124,column:23},end:{line:124,column:53}},55:{start:{line:126,column:2},end:{line:126,column:65}},56:{start:{line:128,column:2},end:{line:128,column:52}},57:{start:{line:130,column:13},end:{line:130,column:45}},58:{start:{line:131,column:21},end:{line:131,column:51}},59:{start:{line:133,column:23},end:{line:135,column:55}},60:{start:{line:134,column:4},end:{line:134,column:52}},61:{start:{line:137,column:16},end:{line:137,column:40}},62:{start:{line:138,column:23},end:{line:138,column:58}},63:{start:{line:139,column:2},end:{line:139,column:65}},64:{start:{line:141,column:2},end:{line:141,column:57}}},fnMap:{0:{name:"_classCallCheck",decl:{start:{line:1,column:9},end:{line:1,column:24}},loc:{start:{line:1,column:48},end:{line:1,column:153}},line:1},1:{name:"NeuralNetwork",decl:{start:{line:12,column:29},end:{line:12,column:42}},loc:{start:{line:12,column:45},end:{line:34,column:1}},line:12},2:{name:"f",decl:{start:{line:23,column:19},end:{line:23,column:20}},loc:{start:{line:23,column:24},end:{line:25,column:3}},line:23},3:{name:"(anonymous_3)",decl:{start:{line:42,column:48},end:{line:42,column:49}},loc:{start:{line:42,column:60},end:{line:45,column:1}},line:42},4:{name:"(anonymous_4)",decl:{start:{line:53,column:42},end:{line:53,column:43}},loc:{start:{line:53,column:54},end:{line:56,column:1}},line:53},5:{name:"(anonymous_5)",decl:{start:{line:65,column:34},end:{line:65,column:35}},loc:{start:{line:65,column:56},end:{line:84,column:1}},line:65},6:{name:"(anonymous_6)",decl:{start:{line:73,column:22},end:{line:73,column:23}},loc:{start:{line:73,column:37},end:{line:75,column:3}},line:73},7:{name:"(anonymous_7)",decl:{start:{line:79,column:22},end:{line:79,column:23}},loc:{start:{line:79,column:37},end:{line:81,column:3}},line:79},8:{name:"(anonymous_8)",decl:{start:{line:93,column:32},end:{line:93,column:33}},loc:{start:{line:93,column:67},end:{line:142,column:1}},line:93},9:{name:"(anonymous_9)",decl:{start:{line:101,column:22},end:{line:101,column:23}},loc:{start:{line:101,column:37},end:{line:103,column:3}},line:101},10:{name:"(anonymous_10)",decl:{start:{line:107,column:24},end:{line:107,column:25}},loc:{start:{line:107,column:39},end:{line:109,column:3}},line:107},11:{name:"(anonymous_11)",decl:{start:{line:117,column:30},end:{line:117,column:31}},loc:{start:{line:117,column:45},end:{line:119,column:3}},line:117},12:{name:"(anonymous_12)",decl:{start:{line:133,column:45},end:{line:133,column:46}},loc:{start:{line:133,column:60},end:{line:135,column:3}},line:133}},branchMap:{0:{loc:{start:{line:1,column:50},end:{line:1,column:151}},type:"if",locations:[{start:{line:1,column:50},end:{line:1,column:151}},{start:{line:1,column:50},end:{line:1,column:151}}],line:1},1:{loc:{start:{line:43,column:13},end:{line:43,column:88}},type:"cond-expr",locations:[{start:{line:43,column:66},end:{line:43,column:78}},{start:{line:43,column:81},end:{line:43,column:88}}],line:43},2:{loc:{start:{line:43,column:13},end:{line:43,column:63}},type:"binary-expr",locations:[{start:{line:43,column:13},end:{line:43,column:33}},{start:{line:43,column:37},end:{line:43,column:63}}],line:43},3:{loc:{start:{line:54,column:21},end:{line:54,column:92}},type:"cond-expr",locations:[{start:{line:54,column:74},end:{line:54,column:86}},{start:{line:54,column:89},end:{line:54,column:92}}],line:54},4:{loc:{start:{line:54,column:21},end:{line:54,column:71}},type:"binary-expr",locations:[{start:{line:54,column:21},end:{line:54,column:41}},{start:{line:54,column:45},end:{line:54,column:71}}],line:54}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/NeuralNetwork.js"],names:["Matrix","sigmoid","NeuralNetwork","values","inputNodes","hiddenNodes","outputNodes","f","e","Math","random","weightsIh","weightsHo","biasH","biasO","setActivationFunction","setLearningRate","type","prototype","func","activationFunction","learningRate","predict","inputArray","inputs","fromArray","hidden","dot","of","add","map","row","output","toArray","train","targetArray","outputs","targets","outputErrors","subtract","gradients","dfunc","multiply","hiddenT","transpose","weightHoDeltas","whoT","hiddenErrors","hiddenGradient","inputsT","weightIhDeltas"],mappings:"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",sourcesContent:["import Matrix from '@astuanax/funmatrix'\nimport sigmoid from './util/sigmoid'\n\n/**\n * @class NeuralNetwork\n * @param {Number} inputNodes\n * @param {Nmber} hiddenNodes\n * @param {Number} outputNodes\n */\nclass NeuralNetwork {\n  constructor (...values) {\n    [this.inputNodes, this.hiddenNodes, this.outputNodes] = values\n\n    const f = e => Math.random() * 2 - 1\n    this.weightsIh = Matrix.random(f, this.hiddenNodes, this.inputNodes)\n    this.weightsHo = Matrix.random(f, this.outputNodes, this.hiddenNodes)\n\n    this.biasH = Matrix.random(f, this.hiddenNodes, 1)\n    this.biasO = Matrix.random(f, this.outputNodes, 1)\n\n    this.setActivationFunction()\n    this.setLearningRate()\n\n    this.type = 'NeuralNetwork'\n  }\n}\n/**\n * @memberOf NeuralNetwork\n * @function NeuralNetwork#setActivationFunction\n * @param {Function} func\n */\nNeuralNetwork.prototype.setActivationFunction = function (func = sigmoid) {\n  this.activationFunction = func\n}\n\n/**\n * @memberOf NeuralNetwork\n * @function NeuralNetwork#setLearningRate\n * @param {Number} learningRate\n */\nNeuralNetwork.prototype.setLearningRate = function (learningRate = 0.1) {\n  this.learningRate = learningRate\n}\n\n/**\n * @memberOf NeuralNetwork\n * @function NeuralNetwork#predict\n * @param {Array} inputArray\n * @returns {Array}\n */\nNeuralNetwork.prototype.predict = function (inputArray) {\n  // Generating the Hidden Outputs\n  let inputs = Matrix.fromArray(inputArray)\n  let hidden = Matrix.dot(this.weightsIh, inputs)\n  hidden = Matrix.of(hidden).add(this.biasH)\n  // activation function!\n  hidden = hidden.map(row => row.map(this.activationFunction.func))\n\n  // Generating the output's output!\n  let output = Matrix.dot(this.weightsHo, hidden)\n  output = Matrix.of(output).add(this.biasO)\n  output = output.map(row => row.map(this.activationFunction.func))\n  // Sending back to the caller!\n  return output.toArray()\n}\n\n/**\n * @memberOf NeuralNetwork\n * @function NeuralNetwork#train\n * @param {Array} inputArray\n * @param {Array} targetArray\n */\nNeuralNetwork.prototype.train = function (inputArray, targetArray) {\n  // Generating the Hidden Outputs\n  let inputs = Matrix.fromArray(inputArray)\n  let hidden = Matrix.dot(this.weightsIh, inputs)\n\n  hidden = Matrix.of(hidden).add(this.biasH)\n  // activation function!\n  hidden = hidden.map(row => row.map(this.activationFunction.func))\n\n  // Generating the output's output!\n  let outputs = Matrix.dot(this.weightsHo, hidden)\n  outputs = Matrix.of(outputs).add(this.biasO)\n  outputs = outputs.map(row => row.map(this.activationFunction.func))\n\n  // Convert array to matrix object\n  let targets = Matrix.fromArray(targetArray)\n\n  // Calculate the error\n  // ERROR = TARGETS - OUTPUTS\n  let outputErrors = Matrix.of(targets).subtract(outputs)\n\n  // let gradient = outputs * (1 - outputs);\n  // Calculate gradient\n  let gradients = outputs.map(row => row.map(this.activationFunction.dfunc))\n  gradients = gradients.multiply(outputErrors)\n  gradients = gradients.multiply(this.learningRate)\n\n  // Calculate deltas\n  let hiddenT = Matrix.transpose(hidden)\n  let weightHoDeltas = Matrix.dot(gradients, hiddenT)\n\n  // Adjust the weights by deltas\n  this.weightsHo = Matrix.of(this.weightsHo).add(weightHoDeltas)\n\n  // Adjust the bias by its deltas (which is just the gradients)\n  this.biasO = Matrix.of(this.biasO).add(gradients)\n\n  // Calculate the hidden layer errors\n  let whoT = Matrix.transpose(this.weightsHo)\n  let hiddenErrors = Matrix.dot(whoT, outputErrors)\n\n  // Calculate hidden gradient\n  let hiddenGradient = Matrix.of(hidden)\n    .map(row => row.map(this.activationFunction.dfunc))\n    .multiply(hiddenErrors)\n    .multiply(this.learningRate)\n\n  // Calcuate input->hidden deltas\n  let inputsT = Matrix.transpose(inputs)\n\n  let weightIhDeltas = Matrix.dot(hiddenGradient, inputsT)\n\n  this.weightsIh = Matrix.of(this.weightsIh).add(weightIhDeltas)\n  // Adjust the bias by its deltas (which is just the gradients)\n  this.biasH = Matrix.of(this.biasH).add(hiddenGradient)\n}\n\nexport default NeuralNetwork\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}();h.s[2]++;var G=function A(){h.f[1]++,h.s[3]++,function(A,n){if(h.f[0]++,h.s[0]++,!(A instanceof n))throw h.b[0][0]++,h.s[1]++,new TypeError("Cannot call a class as a function");h.b[0][1]++}(this,A),h.s[4]++;for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)h.s[5]++,e[t]=arguments[t];h.s[6]++,this.inputNodes=e[0],h.s[7]++,this.hiddenNodes=e[1],h.s[8]++,this.outputNodes=e[2],h.s[9]++;var l=function(A){return h.f[2]++,h.s[10]++,2*Math.random()-1};h.s[11]++,this.weightsIh=C.a.random(l,this.hiddenNodes,this.inputNodes),h.s[12]++,this.weightsHo=C.a.random(l,this.outputNodes,this.hiddenNodes),h.s[13]++,this.biasH=C.a.random(l,this.hiddenNodes,1),h.s[14]++,this.biasO=C.a.random(l,this.outputNodes,1),h.s[15]++,this.setActivationFunction(),h.s[16]++,this.setLearningRate(),h.s[17]++,this.type="NeuralNetwork"};h.s[18]++,G.prototype.setActivationFunction=function(){h.f[3]++;var A=(h.s[19]++,h.b[2][0]++,arguments.length>0&&(h.b[2][1]++,void 0!==arguments[0])?(h.b[1][0]++,arguments[0]):(h.b[1][1]++,B));h.s[20]++,this.activationFunction=A},h.s[21]++,G.prototype.setLearningRate=function(){h.f[4]++;var A=(h.s[22]++,h.b[4][0]++,arguments.length>0&&(h.b[4][1]++,void 0!==arguments[0])?(h.b[3][0]++,arguments[0]):(h.b[3][1]++,.1));h.s[23]++,this.learningRate=A},h.s[24]++,G.prototype.predict=function(A){h.f[5]++;var n=(h.s[25]++,this),e=(h.s[26]++,C.a.fromArray(A)),t=(h.s[27]++,C.a.dot(this.weightsIh,e));h.s[28]++,t=C.a.of(t).add(this.biasH),h.s[29]++,t=t.map(function(A){return h.f[6]++,h.s[30]++,A.map(n.activationFunction.func)});var l=(h.s[31]++,C.a.dot(this.weightsHo,t));return h.s[32]++,l=C.a.of(l).add(this.biasO),h.s[33]++,l=l.map(function(A){return h.f[7]++,h.s[34]++,A.map(n.activationFunction.func)}),h.s[35]++,l.toArray()},h.s[36]++,G.prototype.train=function(A,n){h.f[8]++;var e=(h.s[37]++,this),t=(h.s[38]++,C.a.fromArray(A)),l=(h.s[39]++,C.a.dot(this.weightsIh,t));h.s[40]++,l=C.a.of(l).add(this.biasH),h.s[41]++,l=l.map(function(A){return h.f[9]++,h.s[42]++,A.map(e.activationFunction.func)});var i=(h.s[43]++,C.a.dot(this.weightsHo,l));h.s[44]++,i=C.a.of(i).add(this.biasO),h.s[45]++,i=i.map(function(A){return h.f[10]++,h.s[46]++,A.map(e.activationFunction.func)});var o=(h.s[47]++,C.a.fromArray(n)),c=(h.s[48]++,C.a.of(o).subtract(i)),u=(h.s[49]++,i.map(function(A){return h.f[11]++,h.s[50]++,A.map(e.activationFunction.dfunc)}));h.s[51]++,u=u.multiply(c),h.s[52]++,u=u.multiply(this.learningRate);var a=(h.s[53]++,C.a.transpose(l)),r=(h.s[54]++,C.a.dot(u,a));h.s[55]++,this.weightsHo=C.a.of(this.weightsHo).add(r),h.s[56]++,this.biasO=C.a.of(this.biasO).add(u);var s=(h.s[57]++,C.a.transpose(this.weightsHo)),m=(h.s[58]++,C.a.dot(s,c)),d=(h.s[59]++,C.a.of(l).map(function(A){return h.f[12]++,h.s[60]++,A.map(e.activationFunction.dfunc)}).multiply(m).multiply(this.learningRate)),p=(h.s[61]++,C.a.transpose(t)),f=(h.s[62]++,C.a.dot(d,p));h.s[63]++,this.weightsIh=C.a.of(this.weightsIh).add(f),h.s[64]++,this.biasH=C.a.of(this.biasH).add(d)};var M=G,g=function(){var A="/Volumes/BigOne/github/funml/src/util/tanh.js",n="f53d758e8231aecfe3c60e86708c3e916bb83fe5",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/util/tanh.js",statementMap:{0:{start:{line:7,column:11},end:{line:11,column:2}},1:{start:{line:8,column:2},end:{line:8,column:22}},2:{start:{line:10,column:2},end:{line:10,column:19}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:7,column:34},end:{line:7,column:35}},loc:{start:{line:7,column:47},end:{line:9,column:1}},line:7},1:{name:"(anonymous_1)",decl:{start:{line:9,column:3},end:{line:9,column:4}},loc:{start:{line:9,column:16},end:{line:11,column:1}},line:9}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/util/tanh.js"],names:["ActivationFunction","tanh","x","Math","y"],mappings:"AAAA,OAAOA,kBAAP,MAA+B,uBAA/B;AAEA;;;;;AAIA,IAAMC,IAAI,GAAG,IAAID,kBAAJ,CACX,UAAAE,CAAC;AAAA,SAAIC,IAAI,CAACF,IAAL,CAAUC,CAAV,CAAJ;AAAA,CADU,EAEX,UAAAE,CAAC;AAAA,SAAI,IAAKA,CAAC,GAAGA,CAAb;AAAA,CAFU,CAAb;AAIA,eAAeH,IAAf",sourcesContent:["import ActivationFunction from '../ActivationFunction'\n\n/**\n * @function tanh\n * @type {ActivationFunction}\n */\nconst tanh = new ActivationFunction(\n  x => Math.tanh(x),\n  y => 1 - (y * y)\n)\nexport default tanh\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}(),I=(g.s[0]++,new p(function(A){return g.f[0]++,g.s[1]++,Math.tanh(A)},function(A){return g.f[1]++,g.s[2]++,1-A*A})),b=function(){var A="/Volumes/BigOne/github/funml/src/Impurity.js",n="945de9d19b68f837ade1a0869a39c58b5137187c",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/Impurity.js",statementMap:{0:{start:{line:1,column:50},end:{line:1,column:151}},1:{start:{line:1,column:92},end:{line:1,column:149}},2:{start:{line:7,column:15},end:{line:11,column:1}},3:{start:{line:8,column:2},end:{line:8,column:34}},4:{start:{line:10,column:2},end:{line:10,column:19}}},fnMap:{0:{name:"_classCallCheck",decl:{start:{line:1,column:9},end:{line:1,column:24}},loc:{start:{line:1,column:48},end:{line:1,column:153}},line:1},1:{name:"Impurity",decl:{start:{line:7,column:24},end:{line:7,column:32}},loc:{start:{line:7,column:39},end:{line:11,column:1}},line:7}},branchMap:{0:{loc:{start:{line:1,column:50},end:{line:1,column:151}},type:"if",locations:[{start:{line:1,column:50},end:{line:1,column:151}},{start:{line:1,column:50},end:{line:1,column:151}}],line:1}},s:{0:0,1:0,2:0,3:0,4:0},f:{0:0,1:0},b:{0:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/Impurity.js"],names:["Impurity","func"],mappings:";;AAAA;;;;IAIqBA,Q,GACnB,kBAAaC,IAAb,EAAmB;AAAA;;AACjB,OAAKA,IAAL,GAAYA,IAAZ;AACD,C;;SAHkBD,Q",sourcesContent:["/**\n * @class Impurity\n * @param func\n */\nexport default class Impurity {\n  constructor (func) {\n    this.func = func\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}();b.s[2]++;var E=function A(n){b.f[1]++,b.s[3]++,function(A,n){if(b.f[0]++,b.s[0]++,!(A instanceof n))throw b.b[0][0]++,b.s[1]++,new TypeError("Cannot call a class as a function");b.b[0][1]++}(this,A),b.s[4]++,this.func=n},y=e(1),O=function(){var A="/Volumes/BigOne/github/funml/src/util/mapReduce.js",n="a2e258e003edeb1315f7173219ab942fc57e2dfd",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/util/mapReduce.js",statementMap:{0:{start:{line:2,column:16},end:{line:6,column:2}},1:{start:{line:3,column:2},end:{line:5,column:4}},2:{start:{line:4,column:4},end:{line:4,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:22},end:{line:2,column:23}},loc:{start:{line:2,column:38},end:{line:6,column:1}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:3,column:9},end:{line:3,column:10}},loc:{start:{line:3,column:25},end:{line:5,column:3}},line:3}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/util/mapReduce.js"],names:["curry","mapReduce","m","r","x","y"],mappings:"AAAA,SAASA,KAAT,QAAsB,QAAtB;AAEA,IAAMC,SAAS,GAAGD,KAAK,CAAC,UAACE,CAAD,EAAIC,CAAJ;AAAA,SAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUF,CAAC,CAACC,CAAD,EAAIF,CAAC,CAACG,CAAD,CAAL,CAAX;AAAA,GAAV;AAAA,CAAD,CAAvB;AACA,eAAeJ,SAAf",sourcesContent:["import { curry } from 'fun.js'\n\nconst mapReduce = curry((m, r) => (x, y) => r(x, m(y)))\nexport default mapReduce\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}(),v=(O.s[0]++,Object(y.curry)(function(A,n){return O.f[0]++,O.s[1]++,function(e,t){return O.f[1]++,O.s[2]++,n(e,A(t))}})),D=function(){var A="/Volumes/BigOne/github/funml/src/util/entropy.js",n="9e67c7b59b79b3737720d8fddc3c3cf4010a6481",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/util/entropy.js",statementMap:{0:{start:{line:4,column:17},end:{line:7,column:6}},1:{start:{line:5,column:2},end:{line:5,column:56}},2:{start:{line:6,column:2},end:{line:6,column:13}},3:{start:{line:9,column:18},end:{line:16,column:1}},4:{start:{line:10,column:2},end:{line:15,column:4}},5:{start:{line:11,column:4},end:{line:14,column:16}},6:{start:{line:12,column:6},end:{line:12,column:26}},7:{start:{line:13,column:6},end:{line:13,column:17}},8:{start:{line:23,column:14},end:{line:35,column:2}},9:{start:{line:25,column:12},end:{line:27,column:4}},10:{start:{line:26,column:4},end:{line:26,column:31}},11:{start:{line:29,column:23},end:{line:29,column:38}},12:{start:{line:30,column:15},end:{line:30,column:31}},13:{start:{line:31,column:25},end:{line:31,column:60}},14:{start:{line:32,column:2},end:{line:34,column:32}},15:{start:{line:33,column:4},end:{line:33,column:29}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:22},end:{line:4,column:23}},loc:{start:{line:4,column:42},end:{line:7,column:1}},line:4},1:{name:"frequencies",decl:{start:{line:9,column:27},end:{line:9,column:38}},loc:{start:{line:9,column:46},end:{line:16,column:1}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:10,column:9},end:{line:10,column:10}},loc:{start:{line:10,column:24},end:{line:15,column:3}},line:10},3:{name:"(anonymous_3)",decl:{start:{line:11,column:16},end:{line:11,column:17}},loc:{start:{line:11,column:34},end:{line:14,column:5}},line:11},4:{name:"(anonymous_4)",decl:{start:{line:23,column:27},end:{line:23,column:28}},loc:{start:{line:23,column:45},end:{line:35,column:1}},line:23},5:{name:"(anonymous_5)",decl:{start:{line:25,column:31},end:{line:25,column:32}},loc:{start:{line:25,column:46},end:{line:27,column:3}},line:25},6:{name:"(anonymous_6)",decl:{start:{line:32,column:24},end:{line:32,column:25}},loc:{start:{line:32,column:37},end:{line:34,column:3}},line:32}},branchMap:{0:{loc:{start:{line:5,column:13},end:{line:5,column:55}},type:"cond-expr",locations:[{start:{line:5,column:38},end:{line:5,column:39}},{start:{line:5,column:42},end:{line:5,column:55}}],line:5}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{0:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/util/entropy.js"],names:["Impurity","add","fold","mapReduce","uniqsCount","acc","val","undefined","frequencies","total","obj","y","push","entropy","matrix","arr","__value","map","row","length","countedClasses","nrRows","getRows","classFrequencies","x","Math","log2"],mappings:"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,QAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,UAAU,GAAGF,IAAI,CAAC,UAACG,GAAD,EAAMC,GAAN,EAAc;AACpCD,EAAAA,GAAG,CAACC,GAAD,CAAH,GAAWD,GAAG,CAACC,GAAD,CAAH,KAAaC,SAAb,GAAyB,CAAzB,GAA6BF,GAAG,CAACC,GAAD,CAAH,IAAY,CAApD;AACA,SAAOD,GAAP;AACD,CAHsB,EAGpB,EAHoB,CAAvB;;AAKA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK;AAAA,SAAI,UAAAC,GAAG;AAAA,WAAIR,IAAI,CAAC,UAACG,GAAD,EAAMM,CAAN,EAAY;AACnDN,MAAAA,GAAG,CAACO,IAAJ,CAASD,CAAC,GAAGF,KAAb;AACA,aAAOJ,GAAP;AACD,KAHuC,CAAJ,CAGjC,EAHiC,EAG7BK,GAH6B,CAAJ;AAAA,GAAP;AAAA,CAAzB;AAKA;;;;;;AAIA,IAAMG,OAAO,GAAG,IAAIb,QAAJ,CACd,UAAAc,MAAM,EAAI;AACR;AACA,MAAMC,GAAG,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAmB,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAP;AAAA,GAAtB,CAAZ;;AACA,MAAMC,cAAc,GAAGhB,UAAU,CAACW,GAAD,CAAjC;AACA,MAAMM,MAAM,GAAGP,MAAM,CAACQ,OAAP,EAAf;AACA,MAAMC,gBAAgB,GAAGf,WAAW,CAACa,MAAD,CAAX,CAAoBD,cAApB,CAAzB;AAEA,SAAOlB,IAAI,CAACC,SAAS,CAAC,UAAAqB,CAAC;AAAA,WAAI,CAACA,CAAD,GAAKC,IAAI,CAACC,IAAL,CAAUF,CAAV,CAAT;AAAA,GAAF,EAAyBvB,GAAzB,CAAV,EAAyC,CAAzC,EAA4CsB,gBAA5C,CAAX;AACD,CATa,CAAhB;AAWA,eAAeV,OAAf",sourcesContent:["import Impurity from '../Impurity'\r\nimport { add, fold } from 'fun.js'\r\nimport mapReduce from './mapReduce'\r\n\r\nconst uniqsCount = fold((acc, val) => {\r\n  acc[val] = acc[val] === undefined ? 1 : acc[val] += 1\r\n  return acc\r\n}, {})\r\n\r\nconst frequencies = total => obj => fold((acc, y) => {\r\n  acc.push(y / total)\r\n  return acc\r\n})([])(obj)\r\n\r\n/**\r\n * @function emtropy\r\n * @type {Impurity}\r\n */\r\nconst entropy = new Impurity(\r\n  matrix => {\r\n    // TODO check instanceof Matrix\r\n    const arr = matrix.__value.map(row => row[row.length - 1])\r\n    const countedClasses = uniqsCount(arr)\r\n    const nrRows = matrix.getRows()\r\n    const classFrequencies = frequencies(nrRows)(countedClasses)\r\n\r\n    return fold(mapReduce(x => -x * Math.log2(x), add), 0, classFrequencies)\r\n  }\r\n)\r\nexport default entropy\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}(),K=(D.s[0]++,Object(y.fold)(function(A,n){return D.f[0]++,D.s[1]++,A[n]=void 0===A[n]?(D.b[0][0]++,1):(D.b[0][1]++,A[n]+=1),D.s[2]++,A},{}));D.s[3]++;var w=(D.s[8]++,new E(function(A){D.f[4]++;var n,e=(D.s[9]++,A.__value.map(function(A){return D.f[5]++,D.s[10]++,A[A.length-1]})),t=(D.s[11]++,K(e)),l=(D.s[12]++,A.getRows()),i=(D.s[13]++,(n=l,D.f[1]++,D.s[4]++,function(A){return D.f[2]++,D.s[5]++,Object(y.fold)(function(A,e){return D.f[3]++,D.s[6]++,A.push(e/n),D.s[7]++,A})([])(A)})(t));return D.s[14]++,Object(y.fold)(v(function(A){return D.f[6]++,D.s[15]++,-A*Math.log2(A)},y.add),0,i)})),x=function(){var A="/Volumes/BigOne/github/funml/src/DecisionTree.js",n="f34cdb90963d939a81ee273e39ad920338f435b3",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/DecisionTree.js",statementMap:{0:{start:{line:1,column:50},end:{line:1,column:151}},1:{start:{line:1,column:92},end:{line:1,column:149}},2:{start:{line:6,column:11},end:{line:14,column:1}},3:{start:{line:7,column:2},end:{line:7,column:30}},4:{start:{line:9,column:2},end:{line:9,column:23}},5:{start:{line:10,column:2},end:{line:10,column:20}},6:{start:{line:11,column:2},end:{line:11,column:19}},7:{start:{line:12,column:2},end:{line:12,column:21}},8:{start:{line:13,column:2},end:{line:13,column:31}},9:{start:{line:16,column:19},end:{line:23,column:1}},10:{start:{line:17,column:21},end:{line:17,column:96}},11:{start:{line:19,column:2},end:{line:19,column:38}},12:{start:{line:21,column:2},end:{line:21,column:30}},13:{start:{line:22,column:2},end:{line:22,column:35}},14:{start:{line:25,column:0},end:{line:29,column:2}},15:{start:{line:26,column:2},end:{line:28,column:5}},16:{start:{line:27,column:4},end:{line:27,column:20}},17:{start:{line:31,column:0},end:{line:61,column:2}},18:{start:{line:34,column:2},end:{line:44,column:3}},19:{start:{line:36,column:4},end:{line:38,column:6}},20:{start:{line:37,column:6},end:{line:37,column:26}},21:{start:{line:41,column:4},end:{line:43,column:6}},22:{start:{line:42,column:6},end:{line:42,column:25}},23:{start:{line:46,column:13},end:{line:52,column:4}},24:{start:{line:47,column:4},end:{line:49,column:5}},25:{start:{line:48,column:6},end:{line:48,column:18}},26:{start:{line:51,column:4},end:{line:51,column:15}},27:{start:{line:53,column:14},end:{line:59,column:4}},28:{start:{line:54,column:4},end:{line:56,column:5}},29:{start:{line:55,column:6},end:{line:55,column:18}},30:{start:{line:58,column:4},end:{line:58,column:15}},31:{start:{line:60,column:2},end:{line:60,column:23}},32:{start:{line:63,column:0},end:{line:121,column:2}},33:{start:{line:64,column:14},end:{line:64,column:18}},34:{start:{line:66,column:13},end:{line:66,column:90}},35:{start:{line:68,column:2},end:{line:70,column:3}},36:{start:{line:69,column:4},end:{line:69,column:22}},37:{start:{line:72,column:14},end:{line:72,column:42}},38:{start:{line:74,column:17},end:{line:74,column:20}},39:{start:{line:75,column:22},end:{line:75,column:24}},40:{start:{line:76,column:17},end:{line:76,column:19}},41:{start:{line:77,column:20},end:{line:77,column:43}},42:{start:{line:79,column:14},end:{line:99,column:3}},43:{start:{line:80,column:23},end:{line:80,column:55}},44:{start:{line:82,column:4},end:{line:98,column:7}},45:{start:{line:83,column:24},end:{line:83,column:51}},46:{start:{line:85,column:14},end:{line:85,column:55}},47:{start:{line:86,column:6},end:{line:86,column:26}},48:{start:{line:88,column:20},end:{line:88,column:59}},49:{start:{line:90,column:17},end:{line:90,column:56}},50:{start:{line:91,column:6},end:{line:91,column:41}},51:{start:{line:93,column:6},end:{line:97,column:7}},52:{start:{line:94,column:8},end:{line:94,column:24}},53:{start:{line:95,column:8},end:{line:95,column:35}},54:{start:{line:96,column:8},end:{line:96,column:31}},55:{start:{line:101,column:2},end:{line:103,column:3}},56:{start:{line:102,column:4},end:{line:102,column:13}},57:{start:{line:105,column:2},end:{line:105,column:36}},58:{start:{line:107,column:2},end:{line:120,column:3}},59:{start:{line:109,column:22},end:{line:109,column:45}},60:{start:{line:111,column:23},end:{line:111,column:46}},61:{start:{line:112,column:4},end:{line:112,column:43}},62:{start:{line:114,column:16},end:{line:114,column:87}},63:{start:{line:116,column:4},end:{line:116,column:32}},64:{start:{line:117,column:4},end:{line:117,column:17}},65:{start:{line:119,column:4},end:{line:119,column:22}},66:{start:{line:123,column:0},end:{line:123,column:55}}},fnMap:{0:{name:"_classCallCheck",decl:{start:{line:1,column:9},end:{line:1,column:24}},loc:{start:{line:1,column:48},end:{line:1,column:153}},line:1},1:{name:"Node",decl:{start:{line:6,column:20},end:{line:6,column:24}},loc:{start:{line:6,column:59},end:{line:14,column:1}},line:6},2:{name:"DecisionTree",decl:{start:{line:16,column:28},end:{line:16,column:40}},loc:{start:{line:16,column:47},end:{line:23,column:1}},line:16},3:{name:"(anonymous_3)",decl:{start:{line:25,column:35},end:{line:25,column:36}},loc:{start:{line:25,column:58},end:{line:29,column:1}},line:25},4:{name:"(anonymous_4)",decl:{start:{line:26,column:18},end:{line:26,column:19}},loc:{start:{line:26,column:31},end:{line:28,column:3}},line:26},5:{name:"(anonymous_5)",decl:{start:{line:31,column:31},end:{line:31,column:32}},loc:{start:{line:31,column:53},end:{line:61,column:1}},line:31},6:{name:"splittingFunction",decl:{start:{line:36,column:33},end:{line:36,column:50}},loc:{start:{line:36,column:56},end:{line:38,column:5}},line:36},7:{name:"splittingFunction",decl:{start:{line:41,column:33},end:{line:41,column:50}},loc:{start:{line:41,column:56},end:{line:43,column:5}},line:41},8:{name:"(anonymous_8)",decl:{start:{line:46,column:23},end:{line:46,column:24}},loc:{start:{line:46,column:41},end:{line:52,column:3}},line:46},9:{name:"(anonymous_9)",decl:{start:{line:53,column:24},end:{line:53,column:25}},loc:{start:{line:53,column:42},end:{line:59,column:3}},line:53},10:{name:"(anonymous_10)",decl:{start:{line:63,column:31},end:{line:63,column:32}},loc:{start:{line:63,column:43},end:{line:121,column:1}},line:63},11:{name:"_loop",decl:{start:{line:79,column:23},end:{line:79,column:28}},loc:{start:{line:79,column:32},end:{line:99,column:3}},line:79},12:{name:"(anonymous_12)",decl:{start:{line:82,column:25},end:{line:82,column:26}},loc:{start:{line:82,column:42},end:{line:98,column:5}},line:82},13:{name:"predict",decl:{start:{line:123,column:42},end:{line:123,column:49}},loc:{start:{line:123,column:52},end:{line:123,column:54}},line:123}},branchMap:{0:{loc:{start:{line:1,column:50},end:{line:1,column:151}},type:"if",locations:[{start:{line:1,column:50},end:{line:1,column:151}},{start:{line:1,column:50},end:{line:1,column:151}}],line:1},1:{loc:{start:{line:9,column:13},end:{line:9,column:22}},type:"binary-expr",locations:[{start:{line:9,column:13},end:{line:9,column:16}},{start:{line:9,column:20},end:{line:9,column:22}}],line:9},2:{loc:{start:{line:13,column:17},end:{line:13,column:30}},type:"binary-expr",locations:[{start:{line:13,column:17},end:{line:13,column:24}},{start:{line:13,column:28},end:{line:13,column:30}}],line:13},3:{loc:{start:{line:17,column:21},end:{line:17,column:96}},type:"cond-expr",locations:[{start:{line:17,column:74},end:{line:17,column:86}},{start:{line:17,column:89},end:{line:17,column:96}}],line:17},4:{loc:{start:{line:17,column:21},end:{line:17,column:71}},type:"binary-expr",locations:[{start:{line:17,column:21},end:{line:17,column:41}},{start:{line:17,column:45},end:{line:17,column:71}}],line:17},5:{loc:{start:{line:34,column:2},end:{line:44,column:3}},type:"if",locations:[{start:{line:34,column:2},end:{line:44,column:3}},{start:{line:34,column:2},end:{line:44,column:3}}],line:34},6:{loc:{start:{line:34,column:6},end:{line:34,column:26}},type:"binary-expr",locations:[{start:{line:34,column:6},end:{line:34,column:14}},{start:{line:34,column:18},end:{line:34,column:26}}],line:34},7:{loc:{start:{line:47,column:4},end:{line:49,column:5}},type:"if",locations:[{start:{line:47,column:4},end:{line:49,column:5}},{start:{line:47,column:4},end:{line:49,column:5}}],line:47},8:{loc:{start:{line:54,column:4},end:{line:56,column:5}},type:"if",locations:[{start:{line:54,column:4},end:{line:56,column:5}},{start:{line:54,column:4},end:{line:56,column:5}}],line:54},9:{loc:{start:{line:66,column:13},end:{line:66,column:90}},type:"cond-expr",locations:[{start:{line:66,column:66},end:{line:66,column:78}},{start:{line:66,column:81},end:{line:66,column:90}}],line:66},10:{loc:{start:{line:66,column:13},end:{line:66,column:63}},type:"binary-expr",locations:[{start:{line:66,column:13},end:{line:66,column:33}},{start:{line:66,column:37},end:{line:66,column:63}}],line:66},11:{loc:{start:{line:68,column:2},end:{line:70,column:3}},type:"if",locations:[{start:{line:68,column:2},end:{line:70,column:3}},{start:{line:68,column:2},end:{line:70,column:3}}],line:68},12:{loc:{start:{line:93,column:6},end:{line:97,column:7}},type:"if",locations:[{start:{line:93,column:6},end:{line:97,column:7}},{start:{line:93,column:6},end:{line:97,column:7}}],line:93},13:{loc:{start:{line:93,column:10},end:{line:93,column:89}},type:"binary-expr",locations:[{start:{line:93,column:10},end:{line:93,column:25}},{start:{line:93,column:29},end:{line:93,column:57}},{start:{line:93,column:61},end:{line:93,column:89}}],line:93},14:{loc:{start:{line:107,column:2},end:{line:120,column:3}},type:"if",locations:[{start:{line:107,column:2},end:{line:120,column:3}},{start:{line:107,column:2},end:{line:120,column:3}}],line:107}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0,0],14:[0,0]},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/DecisionTree.js"],names:["Matrix","entropy","Node","col","value","left","right","results","DecisionTree","data","evalFunction","of","prototype","getColumn","index","map","x","split","m","n","splittingFunction","isNaN","row","fold","acc","push","train","getRows","score","func","bestGain","bestAttribute","bestSets","columnCount","getCols","i","columnValues","__value","forEach","matrixSplit","p","console","log","gain","leftTrained","rightTrained","_node","predict"],mappings:"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",sourcesContent:["import Matrix from '@astuanax/funmatrix'\nimport entropy from './util/entropy'\n\nclass Node {\n  constructor (col, value, left, right, results) {\n    this.col = col || -1\n    this.value = null\n    this.left = left\n    this.right = right\n    this.results = results || []\n  }\n}\n\nclass DecisionTree {\n  constructor (data, evalFunction = entropy) {\n    this.data = Matrix.of(data)\n    this.evalFunction = evalFunction\n  }\n}\n\nDecisionTree.prototype.getColumn = function (data, index) {\n  return data.map(x => x[index])\n}\n\nDecisionTree.prototype.split = function (data, m, n) {\n  let splittingFunction\n  //   splittingFunction = None\n  if (isNaN(m) || isNaN(n)) {\n    // strings\n    splittingFunction = row => row[m] === n\n  } else {\n    // numbers\n    splittingFunction = row => row[m] >= n\n  }\n  const left = data.fold((acc, x) => {\n    if (splittingFunction(x)) {\n      acc.push(x)\n    }\n    return acc\n  })\n  const right = data.fold((acc, x) => {\n    if (!splittingFunction(x)) {\n      acc.push(x)\n    }\n    return acc\n  })\n  return [left, right]\n}\n\nDecisionTree.prototype.train = function (data = this.data) {\n  if (this.data.getRows() === 0) {\n    return new Node()\n  }\n  const score = this.evalFunction.func(data) // Matrix\n\n  let bestGain = 0.0\n  let bestAttribute = []\n  let bestSets = []\n\n  const columnCount = this.data.getCols() - 1 // remove last cell >> dependant value\n\n  for (let i = 0; i < columnCount; ++i) {\n    const columnValues = this.getColumn(data, i).__value\n    columnValues.forEach(value => {\n      const matrixSplit = this.split(data, i, value)\n      const p = matrixSplit[0].getRows() / data.getRows()\n      console.log('p', p)\n      const entropy = this.evalFunction.func(matrixSplit[0])\n      const gain = score - (p * entropy) - ((1 - p) * entropy)\n      console.log('gain', gain, entropy)\n      if (gain > bestGain && matrixSplit[0].getRows() > 0 && matrixSplit[1].getRows() > 0) {\n        bestGain = gain\n        bestAttribute = [i, value]\n        bestSets = matrixSplit\n      }\n    })\n  }\n  console.log('bestGain', bestGain)\n  if (bestGain > 0) {\n    // const left = new DecisionTree(bestSets[0].__value)\n    const leftTrained = this.train(bestSets[0])\n    // const right = new DecisionTree(bestSets[1].__value)\n    const rightTrained = this.train(bestSets[0])\n\n    console.log(leftTrained, rightTrained)\n    const _node = new Node(bestAttribute[0], bestAttribute[1], leftTrained, rightTrained)\n    console.log('_node', _node)\n    return _node\n  } else {\n    return new Node()\n  }\n}\n\nDecisionTree.prototype.predict = function predict () {\n\n}\n\nexport default DecisionTree\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});return i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}();function S(A,n){if(x.f[0]++,x.s[0]++,!(A instanceof n))throw x.b[0][0]++,x.s[1]++,new TypeError("Cannot call a class as a function");x.b[0][1]++}x.s[2]++;var U=function A(n,e,t,l,i){x.f[1]++,x.s[3]++,S(this,A),x.s[4]++,this.col=(x.b[1][0]++,n||(x.b[1][1]++,-1)),x.s[5]++,this.value=null,x.s[6]++,this.left=t,x.s[7]++,this.right=l,x.s[8]++,this.results=(x.b[2][0]++,i||(x.b[2][1]++,[]))};x.s[9]++;var _=function A(n){x.f[2]++;var e=(x.s[10]++,x.b[4][0]++,arguments.length>1&&(x.b[4][1]++,void 0!==arguments[1])?(x.b[3][0]++,arguments[1]):(x.b[3][1]++,w));x.s[11]++,S(this,A),x.s[12]++,this.data=C.a.of(n),x.s[13]++,this.evalFunction=e};x.s[14]++,_.prototype.getColumn=function(A,n){return x.f[3]++,x.s[15]++,A.map(function(A){return x.f[4]++,x.s[16]++,A[n]})},x.s[17]++,_.prototype.split=function(A,n,e){var t;x.f[5]++,x.s[18]++,x.b[6][0]++,isNaN(n)||(x.b[6][1]++,isNaN(e))?(x.b[5][0]++,x.s[19]++,t=function(A){return x.f[6]++,x.s[20]++,A[n]===e}):(x.b[5][1]++,x.s[21]++,t=function(A){return x.f[7]++,x.s[22]++,A[n]>=e});var l=(x.s[23]++,A.fold(function(A,n){return x.f[8]++,x.s[24]++,t(n)?(x.b[7][0]++,x.s[25]++,A.push(n)):x.b[7][1]++,x.s[26]++,A})),i=(x.s[27]++,A.fold(function(A,n){return x.f[9]++,x.s[28]++,t(n)?x.b[8][1]++:(x.b[8][0]++,x.s[29]++,A.push(n)),x.s[30]++,A}));return x.s[31]++,[l,i]},x.s[32]++,_.prototype.train=function(){x.f[10]++;var A=(x.s[33]++,this),n=(x.s[34]++,x.b[10][0]++,arguments.length>0&&(x.b[10][1]++,void 0!==arguments[0])?(x.b[9][0]++,arguments[0]):(x.b[9][1]++,this.data));if(x.s[35]++,0===this.data.getRows())return x.b[11][0]++,x.s[36]++,new U;x.b[11][1]++;var e=(x.s[37]++,this.evalFunction.func(n)),t=(x.s[38]++,0),l=(x.s[39]++,[]),i=(x.s[40]++,[]),o=(x.s[41]++,this.data.getCols()-1);x.s[42]++;var c=function(o){x.f[11]++;var c=(x.s[43]++,A.getColumn(n,o).__value);x.s[44]++,c.forEach(function(c){x.f[12]++;var u=(x.s[45]++,A.split(n,o,c)),a=(x.s[46]++,u[0].getRows()/n.getRows());x.s[47]++,console.log("p",a);var r=(x.s[48]++,A.evalFunction.func(u[0])),s=(x.s[49]++,e-a*r-(1-a)*r);x.s[50]++,console.log("gain",s,r),x.s[51]++,x.b[13][0]++,s>t&&(x.b[13][1]++,u[0].getRows()>0)&&(x.b[13][2]++,u[1].getRows()>0)?(x.b[12][0]++,x.s[52]++,t=s,x.s[53]++,l=[o,c],x.s[54]++,i=u):x.b[12][1]++})};x.s[55]++;for(var u=0;u<o;++u)x.s[56]++,c(u);if(x.s[57]++,console.log("bestGain",t),x.s[58]++,t>0){x.b[14][0]++;var a=(x.s[59]++,this.train(i[0])),r=(x.s[60]++,this.train(i[0]));x.s[61]++,console.log(a,r);var s=(x.s[62]++,new U(l[0],l[1],a,r));return x.s[63]++,console.log("_node",s),x.s[64]++,s}return x.b[14][1]++,x.s[65]++,new U},x.s[66]++,_.prototype.predict=function(){x.f[13]++};var F=_;e.d(n,"Perceptron",function(){return s}),e.d(n,"NeuralNetwork",function(){return M}),e.d(n,"ActivationFunction",function(){return p}),e.d(n,"sigmoid",function(){return B}),e.d(n,"tanh",function(){return I}),e.d(n,"entropy",function(){return w}),e.d(n,"DecisionTree",function(){return F}),e.d(n,"Impurity",function(){return E});!function(){var A="/Volumes/BigOne/github/funml/src/index.js",n="609fdc2be2b2d060aa1cf1f8e96c094f10bf6c0a",e=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Volumes/BigOne/github/funml/src/index.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},inputSourceMap:{version:3,sources:["/Volumes/BigOne/github/funml/src/index.js"],names:["default","Perceptron","NeuralNetwork","ActivationFunction","sigmoid","tanh","entropy","DecisionTree","Impurity"],mappings:"AAAA,SAASA,OAAO,IAAIC,UAApB,QAAsC,cAAtC;AACA,SAASD,OAAO,IAAIE,aAApB,QAAyC,iBAAzC;AACA,SAASF,OAAO,IAAIG,kBAApB,QAA8C,sBAA9C;AACA,SAASH,OAAO,IAAII,OAApB,QAAmC,gBAAnC;AACA,SAASJ,OAAO,IAAIK,IAApB,QAAgC,aAAhC;AAEA,SAASL,OAAO,IAAIM,OAApB,QAAmC,gBAAnC;AACA,SAASN,OAAO,IAAIO,YAApB,QAAwC,gBAAxC;AACA,SAASP,OAAO,IAAIQ,QAApB,QAAoC,YAApC",sourcesContent:["export { default as Perceptron } from './Perceptron'\nexport { default as NeuralNetwork } from './NeuralNetwork'\nexport { default as ActivationFunction } from './ActivationFunction'\nexport { default as sigmoid } from './util/sigmoid'\nexport { default as tanh } from './util/tanh'\n\nexport { default as entropy } from './util/entropy'\nexport { default as DecisionTree } from './DecisionTree'\nexport { default as Impurity } from './Impurity'\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=e[t]||(e[t]={});i[A]&&i[A].hash===n?i[A]:(l.hash=n,i[A]=l)}()}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,