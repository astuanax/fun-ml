!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("@astuanax/funml",[],e):"object"==typeof exports?exports["@astuanax/funml"]=e():t["@astuanax/funml"]=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.func=e,this.dfunc=n},t.exports=e.default},function(t,e,n){"use strict";var o;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=new(((o=n(0))&&o.__esModule?o:{default:o}).default)(function(t){return 1/(1+Math.exp(-t))},function(t){return t*(1-t)});e.default=r,t.exports=e.default},function(t,e,n){t.exports=n(3)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Perceptron",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"NeuralNetwork",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"ActivationFunction",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"sigmoid",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"tanh",{enumerable:!0,get:function(){return a.default}});var o=f(n(4)),r=f(n(5)),u=f(n(0)),i=f(n(1)),a=f(n(6));function f(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=function(t){this.weights=t||[]};o.of=function(t){return t instanceof o?t:this instanceof o?(this.weights=t,this):new o(t)},o.prototype.type="Perceptron",o.prototype.predict=function(t){var e=this,n=this.weights[0];return t.forEach(function(t,o){n+=e.weights[o+1]*t}),n>=0?1:0},o.prototype.train=function(t,e,n){var o=this;this.weights=Array.apply(null,Array(t[0].length)).map(function(t){return 0});for(var r=0;r<n;r++)t.forEach(function(t,n){var r=t.slice(-1)[0],u=t.slice(0,-1),i=r-o.predict(u);u.forEach(function(t,n){o.weights[n+1]+=e*i*t})})};var r=o;e.default=r,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=u(n(7)),r=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}var i=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];this.inputNodes=n[0],this.hiddenNodes=n[1],this.outputNodes=n[2];var u=function(t){return 2*Math.random()-1};this.weightsIh=o.default.random(u,this.hiddenNodes,this.inputNodes),this.weightsHo=o.default.random(u,this.outputNodes,this.hiddenNodes),this.biasH=o.default.random(u,this.hiddenNodes,1),this.biasO=o.default.random(u,this.outputNodes,1),this.setActivationFunction(),this.setLearningRate(),this.type="NeuralNetwork"};i.prototype.setActivationFunction=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.default;this.activationFunction=t},i.prototype.setLearningRate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.1;this.learningRate=t},i.prototype.predict=function(t){var e=o.default.fromArray(t),n=o.default.dot(this.weightsIh,e);n.add(this.biasH),n.map(this.activationFunction.func);var r=o.default.dot(this.weightsHo,n);return r.add(this.biasO),r.map(this.activationFunction.func),r.toArray()},i.prototype.train=function(t,e){var n=o.default.fromArray(t),r=o.default.dot(this.weightsIh,n);r.add(this.biasH),r.map(this.activationFunction.func);var u=o.default.dot(this.weightsHo,r);u.add(this.biasO),u.map(this.activationFunction.func);var i=o.default.fromArray(e),a=o.default.of(i).subtract(u),f=o.default.of([[u.map(this.activationFunction.dfunc)]]);console.log(0,u,f,a),f=f.multiply(a),console.log(1,f,this.learningRate),f=f.multiply(this.learningRate),console.log(2,f);var s=o.default.transpose(r),c=o.default.dot(f,s);this.weightsHo.add(c),this.biasO.add(f);var l=o.default.transpose(this.weightsHo),p=o.default.dot(l,a),h=o.default.of(r).map(this.activationFunction.dfunc).multiply(p).multiply(this.learningRate),d=o.default.transpose(n),_=o.default.dot(h,d);this.weightsIh.add(_),this.biasH.add(h)};var a=i;e.default=a,t.exports=e.default},function(t,e,n){"use strict";var o;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=new(((o=n(0))&&o.__esModule?o:{default:o}).default)(function(t){return Math.tanh(t)},function(t){return 1-t*t});e.default=r,t.exports=e.default},function(t,e,n){"use strict";function o(t){const e=t.length;return 0===e?t:n([]);function n(o){return function(){return function(o,r){const u=o.concat(r);return u.length<e?n(u):t.apply(this,u)}(o,Array.prototype.slice.call(arguments))}}}n.r(e);var r=o(function(t,e){let n=-1;const o=e.length,r=new Array(o);for(;++n<o;)r[n]=t(e[n],n,e);return r});function u(t){return new t.constructor}var i=o(function(t){return Object.keys(Object(t))}),a=o(function(t,e){const n=i(e);let o=-1;const r=n.length,a=u(e);for(;++o<r;)a[n[o]]=t(e[n[o]],n[o],e);return a}),f=o(function(t,e){const n=u(e);return e.forEach((e,o,r)=>{n.set(o,t(e,o,r))}),n}),s=o(function(t,e){let n=-1;const o=e.length;let r="";for(;++n<o;)r+=t(e.charAt(n),n,e);return r}),c=o(function(t,e){let n=[];for(let o=e.next();!0!==o.done;o=e.next())n.push(t(e.value()));return n});var l,p=(l=function(t){return Object.prototype.toString.call(t).slice(8,-1)},function(t){return 0===arguments.length?this:l(t)}),h=o(function(t,e){return p(e)===t});const d=h("Function");var _=o(function(t,e){switch(p(e)){case"Function":return o(function(){return t.call(this,e.apply(this,arguments))});case"Object":return a(t,e);case"String":return s(t,e);case"Map":return f(t,e);case"Array":return r(t,e);default:return d(e[Symbol.iterator])?c(t,e):r(t,e)}}),y=o(function(t,e,n){let o=-1;const r=n.length;let u=e;for(;++o<r;)u=t(u,n[o],o,n);return u}),v=o(function(t,e,n){const o=i(n);let r=-1;const u=o.length;let a=Object(e);for(;++r<u;)a=t(a,n[o[r]],o[r],n);return a}),g=o(function(t,e,n){return{Object:v,Array:y}[p(n)](t,e,n)});function m(t){return!(null==t)}var b=h("Number"),w=o(function(t,e){return t&&e});function O(t){return w(b(t),isNaN(t))}var j=o(function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!O(t)||!O(e))}),M=o(function(t){return!t}),A=o(function(t,e){return t||e}),x=h("Object"),R=h("Array"),C=h("Boolean"),P=h("String"),N=h("Date"),S=o(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(M(k(t[n],e[n])))return!1;return!0}),F=o((t,e)=>{for(let n in t)if(M(k(t[n],e[n])))return!1;for(let n in e)if(M(m(t[n]))&&m(e[n]))return!1;return!0}),k=o(function(t,e){return!!j(t,e)||p(t)===p(e)&&(!A(M(m(t)),M(m(e)))&&(t.constructor===e.constructor&&(P(t)||C(t)||b(t)||N(t)?j(t.valueOf(),e.valueOf()):R(t)?S(t,e):!!x(t)&&F(t,e))))}),E=o(function(t,e){return Array.prototype.concat(t,e)});function H(t,e){return String(t)+String(e)}var z=o(function(t,e){return{String:H,Array:E}[p(t)](t,e)}),I=o(function(t,e,n){return z(e,t.__value[n])}),T=o(t=>[]);var q=o((t,e,n)=>_((o,r)=>g((n,o,u)=>n+=function(t,e){return Number(Math.round(t+"e"+e)+"e-"+e)}(o*e.__value[u][r],t),0)(n))(e.__value[0])),L=(t,e)=>_((t,n)=>1*(e===n))(t),B=o((t,e)=>_((n,o)=>(t[o]||[]).concat(e[o]))(e)),D=(t,e)=>Array.apply(null,Array(t)).map(t=>Array.apply(null,Array(e)));let U=function(t){this.__value=t};U.of=function(t){return t instanceof U?t:this instanceof U?(this.__value=t,this):new U(t)},U.prototype.type="Matrix",U.prototype.precision=4,U.prototype.setPrecision=function(t){this.precision=t},U.prototype.isSymmetric=function(){const t=this.__value,e=U.transpose(this).__value;return k(t,e)},U.prototype.isSquare=function(){return k(this.getCols(),this.getRows())},U.prototype.isOrthogonal=function(){const t=this.dot(this.transpose()),e=this.identity();return k(t,e)},U.prototype.getCols=function(){return this.__value[0].length},U.prototype.equals=function(t){return k(this.__value,t.__value||t)},U.prototype.getRows=function(){return this.__value.length},U.prototype.getShape=function(){return[this.getRows(),this.getCols()]},U.prototype.map=function(t){return U.of(_(t)(this.__value))},U.map=o(function(t,e){return U.of(e).map(t)}),U.prototype.fold=function(t){return U.of(g(t,[])(this.__value))},U.fold=o(function(t,e){return U.of(e).fold(t)}),U.prototype.ap=function(t){return U.of(t).map(this.__value)},U.ap=o(function(t,e){return U.of(t).ap(e)}),U.prototype.concat=function(t,e=I){return U.of(this).map(e(t))},U.concat=o(function(t,e,n=I){return U.of(t).map(n(e))}),U.prototype.empty=function(){return U.of(this).map(T)},U.empty=o(function(t=0,e=0){const n=D(t,e);return U.of(n).map(T)}),U.prototype.identity=function(){return U.of(L).ap(this)},U.identity=function(t,e){const n=D(t,e);return U.of(L).ap(n)},U.prototype.combine=function(t){return U.of(this).concat(U.of(t),I)},U.combine=function(t,e){return U.of(t).concat(U.of(e),I)},U.prototype.dot=function(t){return U.of(this).concat(U.of(t),q(this.precision))},U.dot=function(t,e){return U.of(t).dot(U.of(e))},U.prototype.fill=function(t){return U.of(this).map(_(e=>t(e)))},U.prototype.zeros=function(){return U.of(this).fill(t=>0)},U.zeros=function(t,e){const n=D(t,e);return U.of(n).fill(t=>0)},U.prototype.ones=function(){return U.of(this).fill(t=>1)},U.ones=function(t,e){const n=D(t,e);return U.of(n).fill(t=>1)},U.prototype.random=function(t=(t=>2*Math.random()-1)){return U.of(this).fill(t)},U.random=function(t=(t=>2*Math.random()-1),e,n){const o=D(e,n);return U.of(o).fill(t)},U.prototype.toArray=function(){return this.__value.map(t=>t.map(t=>t))},U.prototype.clone=function(){return U.fromArray(this.__value)},U.fromArray=function(t){return U.of(_(t=>_(t=>t)(t))(t))},U.prototype.transpose=function(){return U.of(g(B,[],this.__value))},U.transpose=function(t){return U.of(t).transpose()},U.prototype.add=function(t){if(t instanceof U){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot add");return this.map((e,n)=>_((e,o)=>e+t.__value[n][o])(e))}return this.map(_(e=>e+t))},U.prototype.subtract=function(t){if(t instanceof U){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw new Error("Matrices do not match, cannot subtract");return this.map((e,n)=>_((e,o)=>e-t.__value[n][o])(e))}return this.map(_(e=>e-t))},U.prototype.multiply=function(t){if(t instanceof U){if(this.getCols()!==t.getCols()||this.getRows()!==t.getRows())throw console.log("Use static method 'dot' to do matrix multiplication"),new Error("Matrices do not match, cannot create hadamard product");return this.map((e,n)=>_((e,o)=>e*t.__value[n][o])(e))}return this.map(_(e=>e*t))},U.prototype.additiveinverse=function(){return U.of(this).multiply(-1)},U.prototype.hadamard=function(t){return U.of(this).multiply(t)},U.prototype.lu=function(){const t=this.getRows(),e=this.clone(),n=this.zeros(),o=this.zeros();for(let r=0;r<t;++r){if(Math.abs(e.__value[r][r])<1e-6)throw Error("Cannot proceed without a row exchange");n.__value[r][r]=1;for(let o=r+1;o<t;++o){n.__value[o][r]=e.__value[o][r]/e.__value[r][r];for(let u=r+1;u<t;++u)e.__value[o][u]=e.__value[o][u]-n.__value[o][r]*e.__value[r][u]}for(let n=r;n<t;++n)o.__value[r][n]=e.__value[r][n]}return[n,o]},U.prototype.rref=function(){let t=0;const e=this.clone();for(let n=0;n<this.getRows();++n){if(this.getCols()<=t)return e;let o=n;for(;0===e.__value[o][t];)if(++o,this.getRows()===o&&(o=n,++t,this.getCols()===t))return e;let r=e.__value[o];e.__value[o]=e.__value[n],e.__value[n]=r;let u=e.__value[n][t];for(let t=0;t<this.getCols();++t)e.__value[n][t]/=u;for(let o=0;o<this.getRows();++o)if(o!==n){u=e.__value[o][t];for(let t=0;t<this.getCols();++t)e.__value[o][t]-=u*e.__value[n][t]}t++}return e},U.prototype.solve=function(t){const e=this.clone().lu(),n=e[0],o=e[1],r=this.getRows();let u=0;const i=[],a=[];for(let e=0;e<r;++e){for(let t=0;t<e;++t)u+=n.__value[e][t]*i[t];i[e]=t[e]-u,u=0}for(let t=r-1;t>-1;--t){let e=0;for(let n=t+1;n<r;++n)e+=o.__value[t][n]*a[n];a[t]=(i[t]-e)/o.__value[t][t]}return a},U.prototype.inverse=function(){const t=this.clone(),e=t.identity(),n=t.concat(e).rref().__value.reduce((t,e,n)=>{const o=e.length/2;return t.push(e.slice(o,e.length)),t},[]);return U.of(n)},U.prototype.rank=function(){const t=this.rref();let e=0;for(let n=0;n<t.getCols();++n)e+=t.__value[n][n];return e},U.prototype.dimension=function(){return this.rank()},U.prototype.diag=function(){return g((t,e,n)=>t.concat(e[n]))([])(this.__value)},U.diag=function(t){return U.of(t).diag()},U.prototype.diagproduct=function(){return g((t,e,n)=>t*=e[n])(1)(this.__value)},U.diagproduct=function(t){return U.of(t).diagproduct()},U.prototype.sum=function(){return g((t,e)=>t+=g((t,e)=>t+e)(0)(e))(0)(this.__value)},U.sum=function(t){return U.of(t).sum()},U.prototype.kronecker=function(t){const e=this.getRows(),n=this.getCols(),o=t.getRows(),r=t.getCols(),u=this.__value,i=t.__value,a=D(e*o,n*r);for(let t=0;t<e;t++)for(let e=0;e<n;e++)for(let n=0;n<o;n++)for(let f=0;f<r;f++)a[o*t+n][r*e+f]=u[t][e]*i[n][f];return U.of(a)},U.kronecker=function(t,e){return U.of(t).kronecker(e)};e.default=U}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,